/*! \page FE_Event_Builder Event Builder Functions

<!-- this page is in the section Frontend  -->
<br>
\htmlonly
<script type="text/javascript">
pages( "FE_Super_Event","FrontendOperation","FE_Slow_Control_system","FE_Event_Builder", "end" ); // back index next {top bottom}
// section parameters: last section; top of this section; next section
sections("RunControl","FrontendOperation","DataAnalysis");
</script>
\endhtmlonly

<br>
\anchor idx_mevb-utility
\anchor idx_event_builder_utility-see-mevb

<hr> @section FE_mevb_utility mevb - event builder utility

\b mevb is an event builder application which takes the MIDAS data output from several frontends,
and assembling them into a new overall MIDAS event.
Two types of event builder can be envisaged:
- Asynchronized data collection
 - Synchronized data collection
In the case where overall data collection is handled by multiple
physically separated frontends, it could be necessary to assemble these
data fragments into a dedicated event. The synchonization of the fragment
collection is left to the user, which is done usually through a specific
hardware mechanism.
Once the fragments are composed in each frontend, they are sent
to the "Event Builder" (eb) where the serial number (pheader-\>serial_number)
of each fragment is compared one event at a time for serial match.
In case of a match, a new event will be composed with its own event ID and
serial number, followed by all the expected event fragments.
The composed event is then sent to the next stage which is usually the
data logger (mlogger).

The @ref RC_mhttpd_utility will present the status of the event builder as an extra equipment
with its corresponding statistical information.

- <b> Arguments </b>
  - [-h ] : help
  - [-h hostname ] : host name 
  - [-e exptname ] : experiment name
  - [-i index ]  : equipment index identification
  - [-b buffer_name ] : Buffer name
  - [-v ] : Show wheel
  - [-d ] : debug messages
  - [-D ] : start program as a daemon
- <b> Usage </b>
@code
  Thu> mevb -e midas
  Program mevb/EBuilder version 2 started
@endcode

<br><hr><br>
\anchor idx_event_builder

@section FE_eb Introduction to Event building in MIDAS

MIDAS supports event building through a dedicated @ref FE_mevb_utility 
application. Similar to the @ref FE_frontend_utility, the \b mevb application
requires the definition of an equipment structure which describes its mode
of operation. 
<br>The set of parameter for this equipment is limited to:
- Equipment name (appears in the Equipment list).
- Equipment type  (should be 0).
- Destination buffer name (SYSTEM if destination event goes to logger).
- Event ID and Trigger mask for the build event (destination event ID).
- Data format (should match the source data format).

Based on the given buffer name provided at the startup time through the 
<em> -b buffer_name </em> argument, the @ref FE_mevb_utility "mevb task",
will scan all the equipments and 
handle the building of an event based on the identical buffer name found in 
the equipment list <b> if the frontend equipment type includes the  
@ref FE_tbl_EqEb "EQ_EB" flag </b>.

@Note that the "event fragments" used by the event builder are not to be confused with the  @ref FE_fragmented_event "fragmented event"
mechanism.

\anchor idx_event_fragment
@section FE_principle_eb Principle of the Event Builder and related frontend fragment

It is possible that in case of multiple frontends, the same "fragment" code may run in the different
hardware frontends. In order to prevent having to build nFragment different frontend tasks, the 
<b> "-i index" </b> argument given when starting the @ref FE_frontend_utility "frontends" will replicate
the same application image with the necessary dynamic modification required for the proper Event Building operation.

The index can be passed to the frontend application either by this argument, or by environment variable.
@ref BO_MIDAS_FRONTEND_INDEX. 

The "-i index" argument will provide the index to be appended to the minimal set of
parameters to distinguish the different frontends. These parameters are:
- \b frontend_name : Name of the frontend application.
- \b equipment \b name : Name of the equipment (from the Equipment structure).
- \b event \b buffer: Name of the destination buffer (from the Equipment structure).

To allow either synchronized fragment collection or asynchronized gathering of the fragments, the composition of the "event buffer" and "equipment name" require to have the index format part of the 
equipment definition in the case of the synchronized fragment event builder.
<p>
Frontend code for asynchronized fragment collection in the event builder,
Event buffer remains the same for all the fragments:
@code
  /* The frontend name (client name) as seen by other MIDAS clients   */
  char *frontend_name = "ebfe";
  ...
   EQUIPMENT equipment[] = {

      {"Trigger%02d",              /* equipment name */
       1, TRIGGER_ALL,         /* event ID, trigger mask */
       "BUFFER",                  /* event buffer */
       EQ_POLLED | EQ_EB,       /* equipment type + EQ_EB flag <<<<<< */
       LAM_SOURCE(0, 0xFFFFFF), /* event source crate 0, all stations */
       "MIDAS",                 /* format */
@endcode
<p>
Frontend code for synchronized fragment collection in the event buider:
@code
  /* The frontend name (client name) as seen by other MIDAS clients   */
  char *frontend_name = "ebfe";
  ...
   EQUIPMENT equipment[] = {

      {"Trigger%02d",              /* equipment name */
       1, TRIGGER_ALL,         /* event ID, trigger mask */
       "BUF%02d",                  /* event buffer */
       EQ_POLLED | EQ_EB,       /* equipment type + EQ_EB flag <<<<<< */
       LAM_SOURCE(0, 0xFFFFFF), /* event source crate 0, all stations */
       "MIDAS",                 /* format */
@endcode

Once the frontend is started with <em> -i 1 </em>, the MIDAS client name, equipment name and 
buffer name will be modified (case of the synchronized event builder).

@code
> ebfe -i 1 -D
...
odbedit
[local:midas:S]/Equipment>ls
Trigger01
[local:midas:S]Trigger01>ls -lr
Key name                        Type    #Val  Size  Last Opn Mode Value
---------------------------------------------------------------------------
Trigger01                       DIR
    Common                      DIR
        Event ID                WORD    1     2     18h  0   RWD  1
        Trigger mask            WORD    1     2     18h  0   RWD  65535
        Buffer                  STRING  1     32    18h  0   RWD  BUF01
        Type                    INT     1     4     18h  0   RWD  66
        Source                  INT     1     4     18h  0   RWD  16777215
        Format                  STRING  1     8     18h  0   RWD  MIDAS
        Enabled                 BOOL    1     4     18h  0   RWD  y
        Read on                 INT     1     4     18h  0   RWD  257
        Period                  INT     1     4     18h  0   RWD  500
        Event limit             DOUBLE  1     8     18h  0   RWD  0
        Num subevents           DWORD   1     4     18h  0   RWD  0
        Log history             INT     1     4     18h  0   RWD  0
        Frontend host           STRING  1     32    18h  0   RWD  hostname
        Frontend name           STRING  1     32    18h  0   RWD  ebfe01
        Frontend file name      STRING  1     256   18h  0   RWD  .../eventbuilder/ebfe.c
...
@endcode

Independently of the event ID, each fragment frontend will send its data to the composed 
event buffer (BUFxx). The event builder task will make up a list of all the equipment
belonging to the same event buffer name (BUFxx). If multiple equipments exists in the same 
frontend, the equipment type (EQ_EB) and the event buffer name will distinguish them.

\anchor idx_event_builder_flowchart
The Event Builder flowchart below shows a general picture of the event process cycle of the
task. The Event Builder runs in polling mode over all the source buffers collected at the 
begin of run procedure. Once a fragment has been received from all enabled source
("../Settings/Fragment Required y"), an internal event serial number check is performed
prior passing all the fragment to the user code. Content of each fragment can be done within
the user code for further consistency check. 

 * <center> Event Builder Flowchart.
 *  \image html eventbuilder.jpg
 * </center> 

\anchor idx_ODB_tree_event-builder

<hr> @section FE_ODB_EBuilder_Tree The ODB Event Builder Tree

<!--
NOTE :
This section comes from odbstruct.dox and may be more up-to-date than the next section.
-->

The Event builder tree will be created under the Equipment list and will
appear as a standard equipment. The sub tree \em /Common will contains the
specific setting of the equipment while the \em /Variables will remain empty.
\em /Settings will have particular parameter for the Event Builder itself.
The <b> User Field </b> is an ASCII string passed from the ODB to the
eb_begin_of_run() which can be used for steering the event builder.

@code
[local:midas:S]EB>ls -lr
Key name                        Type    #Val  Size  Last Opn Mode Value
---------------------------------------------------------------------------
EB                              DIR
    Common                      DIR
        Event ID                WORD    1     2     5m   0   RWD  1
        Trigger mask            WORD    1     2     5m   0   RWD  0
        Buffer                  STRING  1     32    5m   0   RWD  SYSTEM
        Type                    INT     1     4     5m   0   RWD  0
        Source                  INT     1     4     5m   0   RWD  0
        Format                  STRING  1     8     5m   0   RWD  MIDAS
        Enabled                 BOOL    1     4     5m   0   RWD  y
        Read on                 INT     1     4     5m   0   RWD  0
        Period                  INT     1     4     5m   0   RWD  0
        Event limit             DOUBLE  1     8     5m   0   RWD  0
        Num subevents           DWORD   1     4     5m   0   RWD  0
        Log history             INT     1     4     5m   0   RWD  0
        Frontend host           STRING  1     32    5m   0   RWD  hostname
        Frontend name           STRING  1     32    5m   0   RWD  Ebuilder
        Frontend file name      STRING  1     256   5m   0   RWD  c:\...\ebuser.c
    Variables                   DIR
    Statistics                  DIR
        Events sent             DOUBLE  1     8     3s   0   RWDE 944
        Events per sec.         DOUBLE  1     8     3s   0   RWDE 0
        kBytes per sec.         DOUBLE  1     8     3s   0   RWDE 0
    Settings                    DIR
        Number of Fragment      INT     1     4     9s   0   RWD  2
        User build              BOOL    1     4     9s   0   RWD  n
        User Field              STRING  1     64    9s   0   RWD  100
        Fragment Required       BOOL    2     4     9s   0   RWD
                                        [0]             y
                                        [1]             y
@endcode

@section FE_eb_Operation Event Builder Operation

Using the "eb>" as the current working directory (cwd) for the example, the test procedure is the following:
cwd : midas/examples/eventbuilder  -> referred to as eb>

- Build the mevb task:
@code
eb> make
cc  -g -I/home/midas/packages/midas/include -I/home/midas/packages/midas/drivers -DOS_LINUX -Dextname -c ebuser.c
cc  -g -I/home/midas/packages/midas/include -I/home/midas/packages/midas/drivers -DOS_LINUX -Dextname \
        -o mdsupport.o -c /home/midas/packages/midas/src/mdsupport.c
cc  -g -I/home/midas/packages/midas/include -I/home/midas/packages/midas/drivers -DOS_LINUX -Dextname \
        -o mevb mevb.c ebuser.o mdsupport.o /home/midas/packages/midas/linux/lib/libmidas.a \
        -lm -lz -lutil -lnsl -lpthread -lrt
cc  -g -I/home/midas/packages/midas/include -I/home/midas/packages/midas/drivers -DOS_LINUX -Dextname \
        -c /home/midas/packages/midas/drivers/camac/camacnul.c
cc  -g -I/home/midas/packages/midas/include -I/home/midas/packages/midas/drivers -DOS_LINUX -Dextname \
        -o ebfe ebfe.c camacnul.o /home/midas/packages/midas/linux/lib/mfe.o \
        /home/midas/packages/midas/linux/lib/libmidas.a  -lm -lz -lutil -lnsl -lpthread -lrt
eb>
@endcode
- Start the following 4 applications in 4 differents windows connecting to
  a defined experiment.
  -- If no experiment defined yet, set the environment variable MIDAS_DIR to your
     current directory before spawning the windows.
@code

xterm1: eb> ebfe -i 1 
xterm2: eb> ebfe -i 2 
xterm3: eb> mevb -b BUF
xterm4: eb> odbedit

[local:Default:S]/>ls
System                          
Programs                        
Experiment                      
Logger                          
Runinfo                         
Alarms                          
Equipment                       
[local:Default:S]/>scl
N[local:midas:S]EB>scl
Name                Host
ebfe01              hostname
ebfe02              hostname
ODBEdit             hostname
Ebuilder            hostname
[local:Default:S]/>
[local:Default:S]/>start now
Starting run #2
@endcode

- The xterm3 (mevb) should display something equivalent to the following,
as the print statements are coming from the ebuser code.

\todo     This eb example 1 is missing!!

- The same procedure can be repeated with the fe1 and fe2 started on remote
  nodes.

\todo     This eb example 2  is missing!!





<br>
\htmlonly
<script type="text/javascript">
pages( "FE_Super_Event","FrontendOperation","FE_Slow_Control_system","FE_Event_Builder","" ); // back index next {top bottom}
// section parameters: last section; top of this section; next section
sections("RunControl","FrontendOperation","DataAnalysis");
</script>
\endhtmlonly

<br>
\anchor end
*/
