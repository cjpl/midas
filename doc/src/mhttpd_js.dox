/*! \page    RC_mhttpd_js Javascript Built-In library
<!--  
     subpage of mhttpd_custom_features.dox  
-->

\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
// this is an extra page inserted in, so both previous and next go to the same place
pages( "RC_mhttpd_custom_js_lib", "RunControl",  "RC_mhttpd_custom_js_lib","RC_mhttpd_js",  "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
<br>

The following code is the Javascript Built-in library \b mhttpd.js  (version 5075)


\code

document.onmousemove = getMouseXY;

function getMouseXY(e)
{
   var x = e.pageX;
   var y = e.pageY;
   var p = 'abs: ' + x + '/' + y;
   i = document.getElementById('refimg');
   if (i == null)
      return false;
   document.body.style.cursor = 'crosshair';
   x -= i.offsetLeft;
   y -= i.offsetTop;
   while (i = i.offsetParent) {
      x -= i.offsetLeft;
      y -= i.offsetTop;
   }
   p += '   rel: ' + x + '/' + y;
   window.status = p;
   return true;
}

function XMLHttpRequestGeneric()
{
   var request;
   try {
      request = new XMLHttpRequest(); // Firefox, Opera 8.0+, Safari
   }
   catch (e) {
      try {
         request = new ActiveXObject('Msxml2.XMLHTTP'); // Internet Explorer
      }
      catch (e) {
         try {
            request = new ActiveXObject('Microsoft.XMLHTTP');
         }
         catch (e) {
           alert('Your browser does not support AJAX!');
           return undefined;
         }
      }
   }
  return request;
}

function ODBSet(path, value, pwdname)
{
   var value, request, url;

   if (pwdname != undefined)
      pwd = prompt('Please enter password', '');
   else
      pwd = '';

   request = XMLHttpRequestGeneric();

   url = '?cmd=jset&odb=' + path + '&value=' + value;

   if (pwdname != undefined)
      url += '&pnam=' + pwdname;

   request.open('GET', url, false);

   if (pwdname != undefined)
     request.setRequestHeader('Cookie', 'cpwd='+pwd);

   request.send(null);

   if (request.status != 200 || request.responseText != 'OK')
      alert('ODBSet error:\nPath: '+path+'\nHTTP Status: '+request.status+'\nMe
ssage: '+request.responseText+'\n'+document.location) ;
}

function ODBGet(path, format, defval, len, type)
{
   request = XMLHttpRequestGeneric();

   var url = '?cmd=jget&odb=' + path;
   if (format != undefined && format != '')
      url += '&format=' + format;
   request.open('GET', url, false);
   request.send(null);

   if (path.match(/[*]/)) {
      if (request.responseText == null)
         return null;
     if (request.responseText == '<DB_NO_KEY>') {
         url = '?cmd=jset&odb=' + path + '&value=' + defval + '&len=' + len + '
&type=' + type;

         request.open('GET', url, false);
         request.send(null);
         return defval;
      } else {
         var array = request.responseText.split('\n');
         return array;
      }
   } else {
      if ((request.responseText == '<DB_NO_KEY>' ||
           request.responseText == '<DB_OUT_OF_RANGE>') && defval != undefined)
 {
         url = '?cmd=jset&odb=' + path + '&value=' + defval + '&len=' + len + '
&type=' + type;

         request.open('GET', url, false);
         request.send(null);
         return defval;
      }
      return request.responseText;
   }
}

function ODBKey(path)
{
   request = XMLHttpRequestGeneric();

   var url = '?cmd=jkey&odb=' + path;
   request.open('GET', url, false);
   request.send(null);
   if (request.responseText == null)
      return null;
   var key = request.responseText.split('\n');
   this.name = key[0];
   this.type = key[1];
   this.num_values = key[2];
   this.item_size = key[3];
}

function ODBRpc_rev0(name, rpc, args)
{
   request = XMLHttpRequestGeneric();

   var url = '?cmd=jrpc_rev0&name=' + name + '&rpc=' + rpc;
   for (var i = 2; i < arguments.length; i++) {
     url += '&arg'+(i-2)+'='+arguments[i];
   };
   request.open('GET', url, false);
   request.send(null);
   if (request.responseText == null)
      return null;
   this.reply = request.responseText.split('\n');
}

function ODBGetMsg(n)
{
   request = XMLHttpRequestGeneric();

   var url = '?cmd=jmsg&n=' + n;
   request.open('GET', url, false);
   request.send(null);

   if (n > 1) {
     var array = request.responseText.split('\n');
      return array;
   } else
      return request.responseText;
}

function ODBEdit(path)
{
   var value = ODBGet(path);
   var new_value = prompt('Please enter new value', value);
   if (new_value != undefined) {
      ODBSet(path, new_value);
      window.location.reload();
   }
}

/* MIDAS type definitions */
var TID_BYTE = 1;
var TID_SBYTE = 2;
var TID_CHAR = 3;
var TID_WORD = 4;
var TID_SHORT = 5;
var TID_DWORD = 6;
var TID_INT = 7;
var TID_BOOL = 8;
var TID_FLOAT = 9;
var TID_DOUBLE = 10;
var TID_BITFIELD = 11;
var TID_STRING = 12;
var TID_ARRAY = 13;
var TID_STRUCT = 14;
var TID_KEY = 15;
var TID_LINK = 16;
@endcode
\anchor end
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_custom_features", "RunControl", "RC_mhttpd_custom_features","RC_mhttpd_js",  "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
<br>
*/