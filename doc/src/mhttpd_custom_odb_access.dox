<!-- ------------ O D B     A C C E S S  ------- -->
  
/*! \page    RC_mhttpd_custom_ODB_access Access to the ODB from a Custom page
<br>

\htmlonly <script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_custom_features", "RunControl", "RC_mhttpd_custom_ODB_access_examples","RC_mhttpd_custom_ODB_access",  "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script> \endhtmlonly

<br>

Access to the ODB is available @ref RC_mhttpd_custom_odb_html "using HTML tags" and using @ref RC_mhttpd_custom_odb_js 
"JavaScript functions" with the  @ref RC_mhttpd_custom_js_lib . Both methods are described in the following sections:

 - @ref RC_mhttpd_custom_odb_html
 - @ref RC_mhttpd_custom_odb_js
 - \subpage  RC_mhttpd_custom_ODB_access_examples
 - \subpage  RC_mhttpd_custom_ODB_access_features

 
\anchor idx_odb-HTML-tag 
@section RC_mhttpd_custom_odb_html ODB access using HTML tags

The   <span class = "htmltag">\<odb...\></span> tag has been defined for read/write access to the ODB under HTML. Also shown
in the table below is the equivalent JavaScript function.

\Note that the  <span class = "htmltag">\<odb...\></span> tags  and JavaScript equivalent must be declared
within enclosing HTML <span class="htmltag">\<form...\>....\</form\> </span> tags (see @ref RC_mhttpd_custom_key_access "above").

 

<table
 style="text-align: left; width: 80%;" border="1" cellpadding="2"
cellspacing="0">
  <caption>Above: Access to ODB from HTML
  </caption>
<tr>
<td colspan="1" style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
HTML ODB tag</td>
</td>
 <td style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Meaning
</td>
 <td style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Equivalent JS function
</td>
</tr> 
<!--   line    1     -->
<tr>
<td style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">
<span class="odbtag">
\<odb src="odb path"\>
</span>
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
 Display ODB field (read only)
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
 <span class="js"> ODBGet</span>
</td>
</tr>
<!--   line    2     -->
<tr>
<td style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">
\anchor odb_edit_tag
<span class="odbtag">
\<odb src="odb path" edit=1 pwd="CustomPwd"\>
</span>
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
  Display an Editable ODB field (inline style). Optional @ref RC_mhttpd_custom_pw_protection  "password protection" with \b pwd .
</td>
<td><br></td>
</tr>
<!--   line    3     -->
<tr>
<td style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">
<span class="odbtag">
\<odb src="odb path" edit=2 pwd="CustomPwd" \>
</span>
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
  Display an Editable ODB field (popup style).  Optional  @ref RC_mhttpd_custom_pw_protection  "password protection" with \b pwd .
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
  <span class="js"> ODBEdit</span>
</td>
</tr>
</table>

\b Usage:
\code
Experiment Name: <odb src="/Experiment/Name">
Run Number: <odb src="/runinfo/run number" edit=1>
@endcode

\anchor odb_tag_ex1
\b Example
 
The following image shows the status of the ODB key <span class="odb">/logger/write data</span>:<br>
 * <center>
 *  <span class="image">ODB access using <span class="odbtag">\<odb..\></span> tag</span>
 * <br>
 * \image html html_ex1.jpg
 * </center>
 
  The HTML code fragment producing the image above is shown below: 

\code
<table style="text-align: center; width: 40%;" border="1" cellpadding="2"
cellspacing="2">
<tr><td style="vertical-align: top; background-color: lightyellow; text-align: center;">
Logging data</td>
<td><odb src="/logger/write data">
</td></tr</table>
\endcode

<br>
The HTML code can be enhanced by using JavaScript.  As an illustration, 
the status of the ODB key <span class="odb">/logger/write data</span> is again displayed in the following image,
but in this case the background colour is changed (using Javascript) depending on the value of the key. The 
<span class = "htmltag">\<odb...\></span> tag has been replaced by the equivalent @ref RC_mhttpd_custom_odb_js "Javascript built-in function" <span class="js">ODBGet</span>.

 * <center>
 *  <span class="image">ODB access using  <span class="js">ODBGet</span> showing colour change depending on state of ODB variable</span>
 * \image html js_ex1.jpg
 * <br>
 * \image html js_ex2.jpg
 * </center>
<br> 
The code fragment for the above images is shown below:
\code
<script>
var wd= ODBGet('/logger/write data')
alert ('wd = '+wd);
</script>
<table style="text-align: center; width: 40%;" border="1" cellpadding="2"
cellspacing="2">
<tr>
<td style="vertical-align: top; background-color:  lightyellow; text-align: center;">Logging data</td>
<script>
if (wd == "y")
   document.write('<td style="vertical-align: top; background-color: lime; text-align: center;">'+wd);
else
   document.write('<td style="vertical-align: top; background-color: red; text-align: center;">'+wd);
</script>
</td></tr></table>
\endcode

\note
The built-in library must be  @ref RC_mhttpd_include_js_library "included" 
in the custom page when using any of the JS built-in functions.

See also @ref  RC_mhttpd_js_example1

<br><br>

Because Javascript functions are so easy to use and many have no equivalent HTML ODB code tag, most new custom pages
use only the Javascript functions.





<br><hr><br>




@section RC_mhttpd_custom_odb_js ODB Access using mhttpd JavaScript built-in functions


The following @ref RC_mhttpd_custom_js_lib  "mhttpd JS built-in functions" are defined for ODB access:
<center>
<table
 style="text-align: left; width: 50%;" border="0" cellpadding="2"
cellspacing="0">
<tr><td>
@ref RC_mhttpd_custom_odbget "ODBGet" </td>
<td> <span class ="new">Modified  @ref  ndf_jun_2011</span>  </td></tr>
<tr><td>
@ref RC_mhttpd_custom_odbedit "ODBEdit" </td>
<td><br></td></tr>
<tr><td>
@ref RC_mhttpd_custom_odbset "ODBSet" </td>
<td><br></td></tr>
<tr><td>
@ref RC_mhttpd_custom_odbkey "ODBKey" </td>
<td><br></td></tr>
<tr><td>
@ref RC_mhttpd_custom_odbgetrecord "ODBGetRecord"  </td>
<td>  <span class ="new">New since  @ref  ndf_jun_2011 </span> </td></tr>
<tr><td>
@ref RC_mhttpd_custom_odbextractrecord "ODBExtractRecord"   </td>
<td>  <span class ="new">New since @ref ndf_jun_2011 </span> </td></tr>
<tr><td>
@ref RC_mhttpd_custom_odbmget "ODBMGet"  </td>
<td>   <span class ="new">New since  @ref  ndf_jun_2011</span> </td></tr>
</table>
</center>

 - Full @ref  RC_mhttpd_js_library_features .


<br><hr><br>

\anchor idx_ODBGet-JavaScript-function
@subsection RC_mhttpd_custom_odbget ODBGet JavaScript function

<table
 style="text-align: left; width: 100%;" border="1" cellpadding="2"
cellspacing="0">
  <caption>Above: JavaScript function ODBGet 
  </caption>  
<!--  table 1  title     -->  
<tr>  
<td colspan="1" style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">JavaScript Function</td>
</td>
 <td style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Purpose
</td>
 <td style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Parameters
</td>
</tr> 
<!--  table 1  line    1     -->
<tr>
<td style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">
 <span class="js">
ODBGet(path [, format, defval, len, type] )
</span>
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
Retrieves individual or array values from the ODB.
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">

<!--  table 2  -->
<table
 style="text-align: left; width: 100%;" border="0" cellpadding="2"
cellspacing="0">

 <!--  table 2  Line 1 -->
<tr>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">path</td>
<td colspan="1" style="vertical-align: top;  font-weight: normal; text-align: left;">ODB path or  @ref RC_mhttpd_odbget_subdir "subdirectory"
</td>
</tr>
 <!-- table 2  Line 2 -->
<tr>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">format</td>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">optional format to write out value read from ODB. Do not include spaces.
</td>
</tr>
 <!--  table 2 Line 3 -->
<tr>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">
defval</td>
<td colspan="1" style="vertical-align: top; font-weight: normal; text-align: left;">Value to write if creating the key.
</td>
</tr>
 <!--  table 2 Line 4 -->
<tr>

<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left; ">len</td>
<td colspan="1" style="vertical-align: top; font-weight: normal; text-align: left; ">Key length to use if creating the key.
</td>
</tr>
 <!--  table 2 Line 5 -->
<tr>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;  ">type</td>
<td colspan="1" style="vertical-align:top;  font-weight: normal; text-align: left; ">
Type to use if creating the key. One of the MIDAS Type definitions (see @ref F_Midas_Data_Types).
</td>
</tr>
</table> <!--  table 2 -->
</td>
</tr>
</table> <!--  table 1 -->

\b Usage:<br>
<span class="js">ODBGet</span> works in a similar way to db_set_value() .   If the path does not exist, 
it will be created and set to the supplied value (providing the last 3 parameters are supplied).
<br>
For example, use <span class="js">ODBGet</span>(<<i>path</i>>)
to obtain a value. If <<i>path</i>> points to an array in the ODB, an individual value can be retrieved by
using an index, e.g.
\code
  ODBGet('/Equipment/Environment/Variables/Input[3]');
@endcode
or the complete array can be obtained with
\code
  ODBGet('/Equipment/Environment/Variables/Input[*]');
@endcode
The function then returns a JavaScript array which can be used like
\code
  var a = ODBGet('/Equipment/Environment/Variables/Input[*]');

  for (i=0 ; i<a.length ; i++)
    alert(a[i]);
@endcode

If no <<i>format</i>> parameter is supplied, a default format is used. The following JavaScript 
fragment shows the use of a format parameter:
\code
path='/runinfo/run number';
rn = ODBGet(path,"%4.4d\n");
@endcode

\anchor RC_mhttpd_odbget_subdir
<span class="js">ODBGet</span> also works now where the path is a \b subdirectory  in the ODB
 ( <span class ="new">since  @ref  ndf_jun_2011</span> ).
<br>

\endcode
The following Javascript example shows the contents of the subdirectory  <span class ="odb">/Runinfo</span>
\code
var string = ODBGet("/Runinfo");
document.write('<br>Runinfo subdirectory: "'+string+'"');
\endcode

The output for the above example is:
\code
Runinfo subdirectory: "1 1 1024 0 0 0 Mon Jun 20 09:40:14 2011 1308588014 Mon Jun 20 09:40:46 2011 1308588046"
\endcode

\Note While <span class="js"> ODBGet </span> can be used for subdirectories, an \b easier \b way is to use
 <span class="js">ODBGetRecord </span> and  <span class="js">ODBExtractRecord </span> as shown 
@ref RC_mhttpd_custom_example0 "below".


\b Example
 - @ref  RC_mhttpd_js_example1


<br><hr><br>


\anchor idx_ODBEdit-JavaScript-function
@subsection RC_mhttpd_custom_odbedit ODBEdit  JavaScript function

<table
 style="text-align: left; width: 100%;" border="1" cellpadding="2"
cellspacing="0">
  <caption>Above: JavaScript function ODBEdit
  </caption>
<tr>
<td colspan="1" style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">JavaScript Function</td>
</td>
 <td style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Purpose
</td>
 <td style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Parameters
</td>
</tr> 
<!--  table 1  line    1     -->
<tr>
<td style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">
 <span class="js">
ODBEdit(path)
</span>
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
  Display an Editable ODB field (popup style)

</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">

<!-- table 2 --> 
<table
 style="text-align: left; width: 50%;" border="0" cellpadding="2"
cellspacing="0">

 <!--  table 2 Line 1 -->
<tr>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">path</td>
<td colspan="1" style="vertical-align: top;  font-weight: normal; text-align: left;">ODB path
</td>
</tr>

</table>
</td>
</tr>
</table>

\b Usage:
\code
document.writeln('Edit Run Number:')
document.writeln('<a href="#" onclick="ODBEdit(path)" >')
document.writeln(rn)
document.writeln('</a>');
@endcode

\b Example
 - @ref  RC_mhttpd_js_example1

<br><hr><br>


\anchor idx_ODBSet-Javascript-function
@subsection RC_mhttpd_custom_odbset ODBSet JavaScript function

<table
 style="text-align: left; width: 100%;" border="1" cellpadding="2"
cellspacing="0">
  <caption>Above: JavaScript function ODBSet
  </caption>
<tr>
<td colspan="1" style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">JavaScript Function</td>
</td>
 <td style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Purpose
</td>
 <td style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Parameters
</td>
</tr> 
<!--  table 1   line    1    -->
<tr>
<td style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">
 <span class="js">
ODBSet(path, value [, pwdname] )
</span>
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
  Set one ODB value or an array of values (see  \ref RC_mhttpd_array_note "note")
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
<table
 style="text-align: left; width: 100%;" border="0" cellpadding="2"
cellspacing="0">
 

 <!-- table 2  Line 1 -->
<tr>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">path</td>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: normal; text-align: left; ;">ODB path
</td>
</tr>
 <!--  table 2 Line 2 -->
<tr>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">value</td>
<td colspan="1" style="vertical-align: top;  font-weight: normal; text-align: left;">Set value or array of values
</td>
</tr>
 <!--  table 2 Line 3 -->
<tr>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left; ">pwdname</td>
<td colspan="1" style="vertical-align: top;  font-weight: normal; text-align: left; ">Password (needed if web security is set up).
</td>
</tr>
</table>
</td>
</tr>
</table>

@anchor RC_mhttpd_array_note
<span class="new">Writing arrays with ODBSet has been available since @ref  ndf_may_2010 .</span>
<br>
<b>Usage:</b><br>
Individual ODB values can be set in the background e.g.
\code
ODBSet("/runinfo/run number", 5);
\endcode
or an array of values can be set e.g.
\code
var path = equipment_path + 'GasCalc/Variables/';
var cal_array = gascalc_path + 'Calculated[*]';
var CAL = [35,20,30,5];
ODBSet(cal_array, CAL);
\endcode

If using a password, the \<<i>password_name</i>\> must be defined as an ODB entry (see  @ref RC_mhttpd_custom_pw_protection)


\b Example
 - @ref  RC_mhttpd_js_example2 
 - @ref  RC_mhttpd_js_example3



<br><br><hr><br>


\anchor idx_ODBKey-JavaScript-function
@subsection RC_mhttpd_custom_odbkey ODBKey   JavaScript function

<table
 style="text-align: left; width: 100%;" border="1" cellpadding="2"
cellspacing="0">
  <caption>Above: JavaScript function ODBKey
  </caption>
<tr>
<td colspan="1" style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">JavaScript Function</td>
</td>
 <td style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Purpose
</td>
 <td style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Parameters
</td>
</tr> 

<!--   table 1  line    1    -->
<tr>
<td style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">
 <span class="js">
ODBKey(path)
</span>
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
  Get the structure of an ODB key. Returns the key name, type, number of values, and size. 
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
<table
 style="text-align: left; width: 100%;" border="0" cellpadding="2"
cellspacing="0">

 <!--  table 2 Line 1 -->
<tr>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">path</td>
<td colspan="1" style="vertical-align: top; font-weight: normal; text-align: left; ">ODB path
</td>
</tr>
</table>
</td>
</tr>
</table>

\b Usage:
\code
key = ODBKey('/Experiment/Name');
document.write('key array : '+key+'<br>');
@endcode

\b Example:
 - @ref RC_mhttpd_js_example2 
 - @ref RC_mhttpd_custom_ODB_access_examples


<br><hr><br>


\anchor idx_ODBGetRecord-JavaScript-function
@subsection RC_mhttpd_custom_odbgetrecord ODBGetRecord JavaScript function

<table
 style="text-align: left; width: 100%;" border="1" cellpadding="2"
cellspacing="0">
  <caption>Above: JavaScript function ODBGetRecord
  </caption>
<tr>
<td colspan="1" style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">JavaScript Function</td>
</td>
 <td style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Purpose
</td>
 <td style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Parameters
</td>
</tr> 

<!--   table 1  line    1    -->
<tr>
<td style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">
 <span class="js">
ODBGetRecord(path)
</span>
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
  Get the record of an ODB subdirectory.<br> This can be used as input for
@ref RC_mhttpd_custom_odbextractrecord "ODBExtractRecord"
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
<table
 style="text-align: left; width: 100%;" border="0" cellpadding="2"
cellspacing="0">

 <!--  table 2 Line 1 -->
<tr>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">path</td>
<td colspan="1" style="vertical-align: top; font-weight: normal; text-align: left; ">ODB subdirectory path
</td>
</tr>
</table>
</td>
</tr>
</table>

\b Usage:
\code
ODBGetRecord('/Runinfo');
@endcode

\b Example:
\code
var result = ODBGetRecord('/Runinfo');
document.write('<br>ODBGetRecord: <br>result='+result+'<br>);
var array =[];
array = result.split ('\n');
for (var i=0; i<array.length; i++)
   document.write('<br>'+array[i]);
\endcode

See also @ref RC_mhttpd_custom_odbextractrecord "ODBExtractRecord"

\b Output from example above
\code
ODBGetRecord: 
result=State:1 Online Mode:1 Run number:1 Transition in progress:0 Start abort:0 Requested transition:0 Start time:Wed Jun 15 16:46:07 2011 Start time binary:1308181567 Stop time:Wed Jun 15 16:46:15 2011 Stop time binary:1308181575

State:1
Online Mode:1
Run number:1
Transition in progress:0
Start abort:0
Requested transition:0
Start time:Wed Jun 15 16:46:07 2011
Start time binary:1308181567
Stop time:Wed Jun 15 16:46:15 2011
Stop time binary:1308181575
\endcode


<br><hr><br>


\anchor idx_ODBExtractRecord-JavaScript-function
@subsection RC_mhttpd_custom_odbextractrecord ODBExtractRecord   JavaScript function

<table
 style="text-align: left; width: 100%;" border="1" cellpadding="2"
cellspacing="0">
  <caption>Above: JavaScript function ODBExtractRecord
  </caption>
<tr>
<td colspan="1" style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">JavaScript Function</td>
</td>
 <td style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Purpose
</td>
 <td style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Parameters
</td>
</tr> 

<!--   table 1  line    1    -->
<tr>
<td style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">
 <span class="js">
ODBExtractRecord(record, key)
</span>
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
Extracts the value of a key from the record of an ODB subdirectory. 
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
<table
 style="text-align: left; width: 100%;" border="0" cellpadding="2"
cellspacing="0">

 <!--  table 2 Line 1 -->
<tr>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">record</td>
<td colspan="1" style="vertical-align: top; font-weight: normal; text-align: left; ">ODB record supplied by a call to  @ref RC_mhttpd_custom_odbgetrecord "ODBGetRecord"
</td>
</tr>
<tr> <!--  table 2 Line 2 -->
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">key</td>
<td colspan="1" style="vertical-align: top; font-weight: normal; text-align: left; ">ODB key whose value is to be extracted from record
</td>
</tr>
</table>
</td>
</tr>
</table>

\b Usage:
\code
run_number = ODBExtractRecord(result, "Run number");
@endcode

\anchor RC_mhttpd_custom_example0
\b Example:
\code
var result = ODBGetRecord('/Runinfo');
run_number = ODBExtractRecord(result, 'Run number');
start_time = ODBExtractRecord(result, 'Start time')
document.write('<br>ODBExtractRecord: <br>Run number= '+run_number+'<br>Start time= '+start_time);
\endcode

\b Output from above example:
\code
ODBExtractRecord:
Run number= 1
Start time= Wed Jun 15 16:46:07 2011
\endcode


<br><hr><br>

\anchor idx_ODBMGet-JavaScript-function
@subsection RC_mhttpd_custom_odbmget ODBMGet JavaScript function

This function ("Multi-Get") can be used to obtain ODB values from different paths in one call. This is particularly useful where the time taken
for multiple accesses of the ODB is causing a long delay in updating a custom page (e.g. ODB is located on a remote machine halfway around the world).
<br>

 The ODB paths have to be supplied in an array, the result is again an array. An optional callback routine can be supplied for asynchronous 
operation. Optional formats may be supplied if the resulting number should be formatted in a specific way.

<table
 style="text-align: left; width: 100%;" border="1" cellpadding="2"
cellspacing="0">
  <caption>Above: JavaScript function ODBMGet 
  </caption>  
<!--  table 1  title     -->  
<tr>  
<td colspan="1" style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">JavaScript Function</td>
</td>
 <td style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Purpose
</td>
 <td style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Parameters
</td>
</tr> 
<!--  table 1  line    1     -->
<tr>
<td style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">
 <span class="js">
ODBMGet(paths [, callback, formats] )
</span>
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
Retrieves individual or array values from the ODB in a single call
</td>
<td style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">

<!--  table 2  -->
<table
 style="text-align: left; width: 100%;" border="0" cellpadding="2"
cellspacing="0">

 <!--  table 2  Line 1 -->
<tr>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">paths</td>
<td colspan="1" style="vertical-align: top;  font-weight: normal; text-align: left;">Array of ODB paths
</td>
</tr>
 <!--  table 2 Line 2 -->
<tr>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">
callback</td>
<td colspan="1" style="vertical-align: top; font-weight: normal; text-align: left;">optional callback routine
</td>
</tr>
 <!-- table 2  Line 3 -->
<tr>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">formats</td>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">optional array of formats for output data
</td>
</tr>

</table> <!--  table 2 -->
</td>
</tr>
</table> <!--  table 1 -->

\b Usage:<br>
ODBMGet(paths_array)

\b Example \b 1:
\code
var req = new Array();
req[0]= "/Runinfo/Run number"
req[1]= "/Equipment/Trigger/Statistics/Events sent"
var result = ODBMGet(req);
var run_number = result[0];
var events_sent =  result[1];
document.write('<br>run number = '+run_number+' events sent= '+events_sent);
\endcode
\b Output from above example
\code
run number= 1 events sent= 41
\endcode
<br><br>


\b Example \b 2: using a callback
\code

function callback(result)
{
   run_number = result[0];
   events_sent = result[1];
   
   alert('callback: run number= '+ run_number+' events sent= '+ events_sent);
}

// ....

var req = new Array();
req[0]= "/Runinfo/Run number"
req[1]= "/Equipment/Trigger/Statistics/Events sent"
var result = ODBMGet(req, callback);
document.write('<br>done');
\endcode
<br><br>



\htmlonly <script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_custom_features", "RunControl", "RC_mhttpd_custom_ODB_access_examples","RC_mhttpd_custom_ODB_access",  "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script> \endhtmlonly

<br>
<!-- End of page    RC_mhttpd_custom_ODB_access  -->
\anchor end
*/




/*! \page    RC_mhttpd_custom_ODB_access_examples Examples of accessing ODB from a Custom page
<br>

\htmlonly <script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_custom_ODB_access", "RunControl", "RC_mhttpd_custom_ODB_access_features","RC_mhttpd_custom_ODB_access_examples",  "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script> \endhtmlonly


 - @ref  RC_mhttpd_js_example1
 - @ref  RC_mhttpd_js_example2
 - @ref  RC_mhttpd_js_example3
 - @ref  RC_mhttpd_RPC_example

<br>
@section RC_mhttpd_js_example1 Example of ODB access with HTML and JavaScript equivalent (ODBEdit, ODBGet)

The following simple HTML code shows ODB access using JavaScript (<span class="js">ODBGet, ODBEdit</span>) and
using the HTML <span class="odbtag"> \<odb\></span> tag . The output produced by this code is shown below.
\code

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 TRANSITIONAL//EN">
<html><head>
<title> ODBEdit test</title>
<!-- include the mhttpd JS library -->
\htmlonly <script src="/js/mhttpd.js" type="text/javascript"></script> \endhtmlonly

\htmlonly <script type="text/javascript">
var my_action = '"/CS/try&"'
var rn
var path
var my_expt="midas";

document.write('</head><body>')
document.write('<form method="get" name="form2" action='+my_action+'> ')
document.write('<input name="exp" value="'+my_expt+'" type="hidden">');

document.write('Using Javascript and ODBEdit:<br>')
path='/runinfo/run number'
rn = ODBGet(path,"Run Number with format: %d")
document.writeln('Run Number: '+rn+'<br>')
document.writeln('Edit Run Number:')
document.writeln('<a href="#" onclick="ODBEdit(path)" >')
document.writeln(rn)
document.writeln('</a>');
</script> \endhtmlonly
<br>
Using HTML :
<br>
Using edit=2 ...  Run Number:
<odb src="/runinfo/run number" edit=2>
<br>
Using edit=1 ...  Run Number:
<odb src="/runinfo/run number" edit=1>
<br>
</form>
</html>
@endcode
<br>

This code produces the output shown in Figures 1 and 2 below. In Figure 1, a value has been entered using the hyperlink
created by the \b Javascript function  <span class="js">ODBEdit.</span>  A \b popup box appears in which the user may enter a new value.

* <br><br><br>
* <center> 
* <span class="image">Figure 1: ODB tags under html and javascript - entering an ODB value using Javascript
* <br><br><br>
*  \image html popups_js.png
* </span></center> 
* <br><br><br>

Figure 2 shows entering a value using the \b HTML tags. The two different styles are shown.
 - \b edit=2 type produces a pop-up box as in the Javascript version
 - \b edit=1 type produces an in-line input box


* <br><br><br>
* <center>
*  <span class="image">Figure 2:  ODB tags under html and javascript -  entering an ODB value using HTML
* <br><br><br>
*  \image html popups_html.png
* <br><br><br>
* </span></center> 


@section RC_mhttpd_js_example2  Example of ODB access with JavaScript functions  ODBGet, ODBSet, ODBKey and ODBGetMsg



The following HTML code shows an example using the JavaScript functions <span class="js">ODBSet and ODBKey</span>. There is no 
equivalent to these functions available in HTML.   The output from this example is shown in Figure 3.

\code
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 TRANSITIONAL//EN">
<html><head>
<title> ODBEdit test</title>
\htmlonly <script src="/js/mhttpd.js" type="text/javascript"></script> \endhtmlonly

\htmlonly <script type="text/javascript">
var my_action = '"/CS/try&"'
var rn,ival,irn
var path="/runinfo/run number";
var my_expt="midas";
var message;

function test(path,value)
{
var pattern=/DB_NO_KEY/;
var ival,key

document.write('Function test starting with path: '+path+' value: '+value+'<br>');
document.write('ODBGet with a format parameter:  <br>');
ival = ODBGet(path,"read:%4.4d");
document.write(ival+'<br>');

document.write('<br>Now using ODBSet to set a value: <br>');
document.write('Setting '+path+' to '+value+' with ODBSet<br>') ;
ODBSet(path,value);
ival = ODBGet(path)
document.writeln('Value: '+ival+'<br>')

document.write('<br>Now using ODBKey to get a key using path: '+path+' <br>');
key = ODBKey(path);
document.write('<br>Testing response for the pattern: '+pattern+'...');
 if ( pattern.test(key))
      document.write('test is TRUE <br>');
 else
      document.write('test is FALSE<br>');
document.write('key array : '+key+'<br>');
document.write('done<br>');
return;
}


document.write('</head><body>')
document.write('<form method="get" name="form2" action='+my_action+'> ')
document.write('<input name="exp" value="'+my_expt+'" type="hidden">');

irn=ODBGet(path); // remember initial run number
ODBSet(path,70); // initialize the run number to 70

document.write('Example showing use of ODBGet, ODBSet, ODBKey, ODBGetMsg <br>');
document.write('First with a good path...<br>');
document.write('<span style= "color: green;">')
test("/runinfo/run number", 76);
document.write('</span>')
document.write('<br>Then with bad path to show the difference....<br>');
document.write('<span style= "color: red;">')
test("/nopath/nokey", 79);
document.write('</span>')
message= ODBGetMsg(1);
document.write('Last message:'+message+'<br>');

ODBSet(path,irn); // rewrite initial run number
</script> \endhtmlonly
</form>
</html>


@endcode

* <br><br><br>
* <center> 
*  <span class="image">Figure 3 Output from above example code showing  ODB access with JS built-in functions
* <br><br><br>
*  \image html Odbget.png
* <br><br><br>  
* </span></center> 



@section RC_mhttpd_js_example3  Example of ODB access with arrays

Accessing ODB values can slow the page update considerably where there are many values to access.
The access time can be cut considerably by having most of the input and output data in arrays.

<span class="new"> Note that writing arrays with ODBSet has been supported since  @ref ndf_may_2010 . </span>

In the following example, the raw data is provided in two large arrays.
Some of this data is used in logical calculations (done in JavaScript) to determine the state of
various devices, and the result is output into an array in the ODB in order to colour various
items with the use of "fills" on the image pages.
<br>
In this example, the arrays PLCR,PLCA in the odb are read into arrays in JavaScript in the function
get_PLC_arrays in the file custom_functions.js.  Calculated data stored as an array in the odb are read into
an array CAL.  
\code
// custom_fuctions.js
// globals
var equipment_path='/Equipment/TpcGasPlc/';
var gascalc_array = equipment_path + 'GasCalc/Variables/Calculated[*]';
var variables_path = equipment_path + 'Variables/';
var plcr_path = variables_path + 'PLCR'; // indices of these PLC arrays are in names.js
var plca_path = variables_path + 'PLCA';

var PLCR=[];
var PLCA=[];
var CAL=[];

function get_PLC_arrays()
{  // get the arrays in one go
   // returns 0=success or 1=failure
 
  var pattern1=/DB_NO_KEY/;
  var pattern2=/undefined/;

  var i,idx;
    
  PLCR =     ODBGet(plcr_path+ '[*]');
  if ( pattern1.test(PLCR) ||  pattern2.test(PLCR)  )
  {
      alert ('get_PLCR_array: ERROR '+PLCR+' from ODBGet('+plcr_path+'[*])' );
      return 1;
  } 
  
   PLCA = ODBGet(plca_path+ '[*]', "%9.5f"); // the required values are float
   if ( pattern1.test(PLCA) ||  pattern2.test(PLCA)  )
   {
      alert ('get_PLCA_array: ERROR '+PLCA+' from ODBGet('+plca_path+'[*])' );
      return 1;
   }
              
// get Calculated array
   CAL = ODBGet(gascalc_array, "%d"); // the required values are INT
   if ( pattern1.test(CAL) ||  pattern2.test(CAL)  )
   {
      alert ('get_CAL_array: ERROR '+CAL+' from ODBGet('+gascalc_array+')' );
      return 1;
   }

   return 0; // success
}

..........
\endcode

For each of the gas pages, various items are calculated and the CAL array is updated for each item. At the
end of all calculations, the CAL array is written back into the ODB.

\code
<!-- GasPage.html -->
.......

<!-- js_functions!   custom_functions.js defined by  ODB key  /custom/js_functions!  -->
\htmlonly <script type="text/javascript"  src="js_functions!">
</script> \endhtmlonly
</head><body>


\htmlonly <script>
//Read all the arrays from the ODB
var plc_error = get_PLC_arrays();
.....
calculate_device(G2VA1_STAT,G2VA1,plc_error); // saves result to CAL array
......
calculate_logical(17,PU_Box,plc_error); // saves result to CAL array
......
ODBSet(gascalc_array, CAL); // write CAL array into ODB after all calculations
</script> \endhtmlonly
</body>
</html>
\endcode




\htmlonly <script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_custom_ODB_access", "RunControl", "RC_mhttpd_custom_ODB_access_features","RC_mhttpd_custom_ODB_access_examples",  "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script> \endhtmlonly

<br>
\anchor end
<!-- end of page  RC_mhttpd_custom_ODB_access_examples  -->
*/



/*! \page    RC_mhttpd_custom_ODB_access_features Features using ODB access from a Custom page
<br>

\htmlonly <script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_custom_ODB_access_examples", "RunControl", "RC_mhttpd_custom_RPC_access","RC_mhttpd_custom_ODB_access_features",  "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script> \endhtmlonly

<br>
This page describes several features with ODB access on a custom page.

 -  @ref RC_mhttpd_custom_checkboxes
 -  @ref RC_mhttpd_js_update_part
 -  @ref RC_mhttpd_custom_pw_protection



@section RC_mhttpd_custom_checkboxes Including checkboxes on a custom page

The function <span class="js">ODBSet</span> can be used  when one clicks on an \b checkbox for example:
\code
  <input type="checkbox" onClick="ODBSet('/Logger/Write data',this.checked?'1':'0')">
@endcode

If used as above, the state of the checkbox must be initialized when the page is loaded. This can be done
with some JavaScript code called on initialization, which then uses @ref RC_mhttpd_custom_odbset as described above. 


Alternatively, the checkbox can be created using an <span class="odbtag"> \<odb...\> </span>  @ref RC_mhttpd_custom_odb_html "tag"
 as follows:
\code
  <odb src="/Logger/Write data" type="checkbox" edit="2" onclick="ODBSet('/Logger/Write data',this.checked?'1':'0')">
@endcode

The special code <b>edit="2"</b> instructs  <span class="utility">mhttpd</span> not to put any JavaScript code into the checkbox tag, since setting this value in the 
ODB is now handled by the user-supplied  <span class="js">ODBSet()</span> code. 



@section RC_mhttpd_js_example_3   Example of Checkboxes using JavaScript and HTML

\code
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 TRANSITIONAL//EN">
<html><head>
<title> ODBEdit test</title>
<!-- include the mhttpd JS library -->
\htmlonly <script src="/js/mhttpd.js" type="text/javascript"></script> \endhtmlonly

\htmlonly <script type="text/javascript">

var my_action = '"/CS/try&"'
var ival;
var my_expt="midas";
</script> \endhtmlonly
</head><body>
<form method="get" name="form2" action='+my_action+'>
<input name="exp" value="'+my_expt+'" type="hidden">
Write data: <odb src="/Logger/Write data"><br>
JS Checkbox ... Write Data:
<input  name="mybox"  type="checkbox"   onClick="ODBSet('/Logger/Write data',this.checked?'1':'0')">
\htmlonly <script>
if( ODBGet('/Logger/Write data') =='y')
  ival=1;
else
  ival=0;
document.write('<br>ival='+ival+'<br>');
document.form2.mybox.checked=ival  // initialize to the correct value
</script> \endhtmlonly

<br>HTML checkbox... Write Data:
  <odb src="/Logger/Write data" type="checkbox" edit="2" onclick="ODBSet('/Logger/Write data',this.checked?'1':'0')">
<br>
</form>
</html>
@endcode

* <br><br><br>
* <center> 
*  <span class="image">Figure 4 Output from above code: checkboxes
* <br><br><br>
*  \image html checkboxes.png
* <br><br><br>  
* </span></center> 





<br><hr><br>

\anchor idx_mhttpd_page_custom_refresh_partial
@section RC_mhttpd_js_update_part Periodic update of parts of a custom page

 The functionality of <span class="js">ODBGet</span> together with the
  - <b>window.setInterval()</b> function

  can be used to update parts of 
the web page periodically.
<br>
For example the Javascript fragment below contains a function which updates the current run number
every 10 seconds in the background :
\code
  window.setInterval("Refresh()", 10000);

  function Refresh() {
    document.getElementById("run_number").innerHTML = ODBGet('/Runinfo/Run number');
  }
@endcode

The custom page has to contain an element with id="run_number", such as
\code
  <td id="run_number"></td>
@endcode
<br><br>






@section RC_mhttpd_custom_pw_protection Password protection of ODB variables accessed from a custom page

Being able to control an experiment through a web interface of course raises the
question of safety. This is not so much about external access (for which there are
other protection schemes like host lists etc.) but it's about accidental
access by the normal shift crew. If a single click on a web page opens a
critical valve, this might be a problem. In order to restrict access to some
"experts", an additional password can be chosen for all or some controls on a
custom page.

Password protection is optional, and must be set up by the user.
The <i>password</i> must be defined as an ODB entry of the form
<span class="odb"> /Custom/Pwd/\<password\> </span>.
If the password is <i>CustomPwd</i>, the ODB key
<span class="odb">/Custom/Pwd/CustomPwd </span>
would be defined.

By using an explicit name, one can use a single password for all controls on a page,
or one could use several passwords on the same page. For example, a shift crew password
for the less severe controls (<i>ShiftPwd</i>), and an "expert" password
(<i>ExpertPwd</i>) for the critical things.

The ODB would have two passwords defined, i.e.<br>
<span class="odb">
/Custom/Pwd/ExpertPwd<br>
/Custom/Pwd/ShiftPwd</span><br>

The password is of course not
secure in the sense that it is placed in plain text into the ODB, but its purpose is to
prevent accidental modification, rather than malicious interference.

<br>
 Password protection is available for 
 - @ref RC_mhttpd_custom_pw
 - @ref RC_mhttpd_custom_odbset
 - @ref RC_mhttpd_custom_imagemap_pw 


If password protection \b is set up, <span class="utility">mhttpd</span> will check the supplied password against the ODB entry, and show an error if they don't match.




\anchor end

\htmlonly <script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_custom_ODB_access_examples", "RunControl", "RC_mhttpd_custom_RPC_access","RC_mhttpd_custom_ODB_access_features",  "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script> \endhtmlonly


<!-- end of page   RC_mhttpd_custom_ODB_access_features  -->
*/





/*!@page  RC_mhttpd_custom_RPC_access ODB RPC access


\htmlonly <script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_custom_ODB_access_features", "RunControl", "RC_mhttpd_RPC_example","RC_mhttpd_custom_RPC_access",  "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script> \endhtmlonly

<br>


<span class="new"> RPC access has been available from custom webpages since  @ref  ndf_jan_2009 . </span>

The @ref RC_mhttpd_custom_js_lib  "JavaScript library functions" \b ODBRpc_rev0 and \b ODBRpc_rev1
( <span class ="new">the latter available since  @ref ndf_feb_2011 </span> )
 are defined for RPC access.

This permits buttons on MIDAS "custom" web pages to
invoke RPC calls directly into user frontend programs, for example to turn hardware modules on or off.
 
(Note that the JS library must be @ref RC_mhttpd_include_js_library "included" to use any of the built-in JS functions) :


<br>
<table
 style="text-align: left; width: 100%;" border="1" cellpadding="2"
cellspacing="0">
  <caption>Above: JavaScript functions for RPC access
  </caption>
<tr>
<td colspan="1" rowspan="2" style="vertical-align: center; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">JavaScript Function</td>
</td>
 <td  colspan="1"  rowspan="2" style="vertical-align: center; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Purpose
</td>
 <td  colspan="2"  rowspan="1" style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Parameters
</td>
</tr> 
<tr>  <!--   line    1     -->
 <td  colspan="1"  rowspan="1" style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Name
</td>
 <td  colspan="1"  rowspan="1" style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">
Explanation
</td></tr>
<tr> <!--   line    2    -->
<td rowspan=3 style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">
 <span class ="js">ODBRpc_rev0(name, rpc, args)</span>
</td>
<td  rowspan=3 style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
Invoke RPC call from webpage
</td>
<td style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">name</td>
<td style="vertical-align: top;  font-weight: normal; text-align: left;">Name of frontend containing rpc callback function
</td>
</tr>
<tr>  <!--   Line 3 -->
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">rpc</td>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">RPC ID associated with rpc callback function
</td>
</tr>
<tr>  <!--   Line 4 -->
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">args</td>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">user dependent arguments?
</td>
</tr>


<!--   Line    5     -->
<tr>
<td rowspan=4 style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">
 <span class ="js">ODBRpc_rev1(name, rpc, max_reply_length, args)</span>
 
</td>
<td rowspan=4 style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">
Invoke RPC call, returns data to the webpage
</td>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">name</td>
<td colspan="1" style="vertical-align: top;  font-weight: normal; text-align: left;">Name of frontend containing rpc callback function
</td>
</tr>
<tr> <!-- Line   6 -->
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">rpc</td>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">RPC ID associated with rpc callback function
</td>
</tr>
<tr> <!-- Line   7 -->
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">max reply length</td>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">maximum length of reply
</td>
</tr>
<tr> <!--  Line 8  -->
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: bold; text-align: left;">args</td>
<td colspan="1" style="vertical-align: top; background-color: white; font-weight: normal; text-align: left;">user dependent arguments?
</td>
</tr>
</table>

The rpc callback function must be associated with the RPC ID  in the frontend with a call to \b cm_register_function (see 
@ref RC_mhttpd_ODB_example "example"). 



 - \subpage  RC_mhttpd_RPC_example


 
\htmlonly <script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_custom_ODB_access_features", "RunControl", "RC_mhttpd_RPC_example","RC_mhttpd_custom_RPC_access",  "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script> \endhtmlonly


<br>
\anchor end
<!-- end of page RC_mhttpd_custom_RPC_access -->
*/


/*!@page  RC_mhttpd_RPC_example ODB access example including  ODBGet, ODBSet,  ODBGetMsg, ODBGenerateMsg, ODBRpc JavaScript functions

\htmlonly <script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_custom_RPC_access" , "RunControl", "RC_mhttpd_Image_access", "RC_mhttpd_ODB_example" ,  "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script> \endhtmlonly

A MIDAS example for using most mhttpd html and javascript functions including ODBRpc() is available in the 
directory .../midas/examples/javascript1/ in the MIDAS package. To run the example, follow instructions in the README file.

The html code from this directory ( \b example1.html ) is shown below for illustration.
and the output is shown @ref RC_mhttpd_RPC_output "here".

\code
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <title>Example MIDAS Javascript functions</title>

    <script src='mhttpd.js'></script>
  </head>

  <body>
    <h1>Example MIDAS Javascript functions</h1>

    <p id="LastUpdated">Last updated: never</p>

    <h2>Example of mhttpd &lt;odb&gt; tag</h2>

    <p>
      <i>This data is updated by web page reload - press your web browser "reload" button</i>
    </p>
    <p>
      Settings/Example_int: <odb src="/Equipment/RpcExample/Settings/Example_int"></odb>
    </p>
    <p>
      Variables/SLOW[2]: <odb src="/Equipment/RpcExample/Variables/SLOW[2]" format="%.3f"></odb>
    </p>
    
    <h2>Example javascript update function</h2>

    <input type=button value='Update once' onClick='updatePeriod=0; update();'></input>
    <input type=button value='Update every 1 sec' onClick='updatePeriod=1000; update();'></input>
    <input type=button value='Update every 10 sec' onClick='updatePeriod=10000; update();'></input>
      
    <h2>Example of ODBGet() javascript function</h2>

    <p>
      <i>This data is updated by the javascript update() function - press the "update" button</i>
    </p>
    <p>
      Settings/Example_int: <tt id="example_int">not loaded yet</tt>
    </p>
    <p>
      Variables/SLOW[2]: <tt id="slow_2">not loaded yet</tt>
    </p>

    
    <h2>Example of ODBSet() javascript function</h2>
      
    <p>
      <i>Press these buttons to write new values to ODB. ODB variables of appropriate type have to be created before calling ODBSet(). Observe updated values in the section above.</i>
    </p>
    <p>
      Set Settings/Example_int to:
      <input type=button value='value 1' onClick='clearTimeout(updateTimerId); ODBSet("/Equipment/RpcExample/Settings/Example_int", "1"); update();'></input>
      <input type=button value='value 2' onClick='clearTimeout(updateTimerId); ODBSet("/Equipment/RpcExample/Settings/Example_int", "2"); update();'></input>
      <input type=button value='value 3' onClick='clearTimeout(updateTimerId); ODBSet("/Equipment/RpcExample/Settings/Example_int", "3"); update();'></input>
    </p>

    <p>
      Set Settings/Example_int to any value:
      <input type=input size=5 value='200' onKeyPress='if (event.keyCode==13) { clearTimeout(updateTimerId); ODBSet("/Equipment/RpcExample/Settings/Example_int", this.value); update(); }'></input>
      (type in any value and press Enter)
    </p>

    <h2>Example of ODBRpc_rev0() javascript function</h2>
      
    <p>
      Call the rpc_callback function in our frontend program: 
      <input type=button value='Push me' onClick='clearTimeout(updateTimerId); ODBRpc_rev0("fejrpc*", 101, "123", "arg2", "arg3"); update();'></input>
    </p>
    <p>
      <i>Observe the output of our rpc handler in midas messages</i>
    </p>

    <h2>Example of ODBRpc_rev1() javascript function</h2>
      
    <p>
      Call the rpc_callback function in fejrpc.cxx: 
      <input type=button value='Push me' onClick='clearTimeout(updateTimerId); var ret = ODBRpc_rev1("fejrpc*", 102, 0, "123", "arg2", "arg3"); process(ret); update();'></input>
    </p>

    <p>
      Data returned by the RPC call: <pre id="rpc_result"></pre>
    </p>
    <p>
      <i>Observe the output of our rpc handler in midas messages</i>
    </p>

    <h2>Example of ODBGetMsg() javascript function</h2>
      
    <p>
      <input type=button value='Get MIDAS messages' onClick='var data = ODBGetMsg(10); document.getElementById("getmsg_target").innerHTML = data.join("\n");'></input>
    </p>
    <pre id='getmsg_target'>
(empty)
    </pre>

    <h2>Example of ODBGenerateMsg() javascript function</h2>
      
    <p>
      <i>Type in a message and press Enter. To see the new message, press "Get MIDAS messages" above</i>
    </p>
    <p>
      <input type=input size=40 value='' onKeyPress='if (event.keyCode==13) { ODBGenerateMsg(this.value); }'></input>
    </p>

    <script type="text/javascript">

      var updatePeriod = 0; // 10000; // in msec
      var updateTimerId = 0;

      var parser;

      function load()
      {
      document.getElementById('LastUpdated').innerHTML = "Updating..." + new Date;
      
      document.getElementById('example_int').innerHTML = ODBGet('/Equipment/RpcExample/Settings/Example_int');
      document.getElementById('slow_2').innerHTML = ODBGet('/Equipment/RpcExample/Variables/SLOW[2]', '%.6f');
      
      document.getElementById('LastUpdated').innerHTML = "Last updated: " + new Date;
      }

      function process(ret)
      {
      var rv = ret.slice(ret.indexOf(" || ") + 4);
      document.getElementById("rpc_result").innerHTML = "[" + rv + "]";
      }
      
      function update()
      {
      clearTimeout(updateTimerId);
      load();
      if (updatePeriod > 0)
      updateTimerId = setTimeout('update()', updatePeriod);
      }
      
      function main()
      {
      clearTimeout(updateTimerId);
      }

      main();
      if (updatePeriod > 0)
      update();

    </script>

    <hr>
    <address><a href="mailto:xxx@xxx">MIDAS Example</a></address>
<!-- Created: Tue Sep 21 15:44:39 PDT 2010 -->
<!-- hhmts start -->
Last modified: Mon Feb 28 08:21:38 PST 2011
<!-- hhmts end -->
  </body>
</html>

\endcode


<br>

\anchor RC_mhttpd_RPC_output
 * <center>
 *  <span class="image">The example html file produced by this example is shown below</span>
 * <br>
 * \image html rpcex.gif
 * </center>
@anchor end

\htmlonly <script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_custom_RPC_access" , "RunControl", "RC_mhttpd_Image_access", "RC_mhttpd_RPC_example" ,  "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script> \endhtmlonly


<br>

<!-- end of page RC_mhttpd_RPC_example -->
*/


