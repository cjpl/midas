/*! @page  RC_mhttpd  mhttpd: the MIDAS Web-based Run Control utility
\anchor idx_mhttpd-utility
<!--  
      RC_mhttpd_utility  is a sub-page of the Run Control section
            RC_mhttpd_utility  is a sub-page of this page
 -->
<br>
\htmlonly 
<script type="text/javascript">
pages( "RC_odbedit_examples",  "RunControl", "RC_mhttpd_utility", "RC_mhttpd",  "end" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly 

\anchor idx_mhttpd
\anchor idx_midas_webserver
 * <center> 
 * <br><br><br>
 * \image html montage5.jpg
 * </center> 


@section RC_mhttpd_intro Introduction
The MIDAS Web Server utility  <span class="utility">mhttpd</span> provides MIDAS DAQ control through
the web using any web browser. Provided the @ref RC_mhttpd_utility "daemon application" is running,
the user may access any MIDAS experiment running on a given host from a Web browser.

Full monitoring and almost full control of a particular experiment can be achieved
through the MIDAS Web server.
   

      - \subpage RC_mhttpd_utility
      - @ref RC_mhttpd_functionality
          - @ref RC_mhttpd_page_list "list of mhttpd pages" 
          - @ref RC_mhttpd_tree_list "list of mhttpd-specific odb trees"
      


 @section  RC_mhttpd_functionality Features of mhttpd

The basic functionality of  <span class="utility">mhttpd</span> includes:
 - <b>Run control</b> (start/stop/pause).
 - \b Sequencer to automatically execute a number of runs
 - Up-to-date <b>client status and  statistics display</b> (frontend(s) logger(s) etc.)
 - <b>Graphical history data</b> display.
 - <b>Electronic LogBook</b> recording/retrieval messages
 - \b Alarm monitoring/control
 - \b Slow \b control data display.
 - Listing of currently \b connected \b clients
 - Basic <b>access to ODB</b>.




These functions are available on one or more of the various \b mhttpd \b pages described below :
\anchor RC_mhttpd_page_list

- \subpage RC_mhttpd_Main_Status_page : monitoring, statistics display, access to other pages etc.
- \subpage RC_mhttpd_Start_page : Run control page
- \subpage RC_mhttpd_ODB_page : Online Database manipulation ( an alternative to using <span class="utility">odbedit</span> )
- \subpage RC_mhttpd_Equipment_page : Frontend information
- \subpage RC_mhttpd_sc_page : Slow Control information
- \subpage RC_mhttpd_CNAF_page : CAMAC access
- \subpage RC_mhttpd_Message_page : Message Log 
- \subpage RC_mhttpd_Elog_page : Electronic Log
- \subpage RC_mhttpd_Program_page : Program control (clients)
- \subpage RC_mhttpd_History_page : History display
- \subpage RC_mhttpd_Alarm_page : Alarm system control
- \subpage RC_mhttpd_MSCB_page MIDAS Slow Control Bus
- \subpage RC_mhttpd_Config_page : status page update period
- \subpage RC_mhttpd_Alias_page : user defined  Alias page(s)
- \subpage RC_mhttpd_Logger_page : data logger settings information
- \subpage RC_mhttpd_Sequencer_page : Run Sequencer
- \subpage RC_mhttpd_Custom_page : user defined Web page(s)




\anchor RC_mhttpd_tree_list
Several directory trees in the ODB are <b> specific to mhttpd</b>, or have \b additional \b features if <span class="utility">mhttpd</span>
is running, e.g.
-  @ref RC_odb_alias_tree "/alias tree"
-  @ref RC_ODB_Experiment_Tree "/experiment tree "
-  @ref RC_odb_custom_tree "/custom tree"
-  @ref RC_odb_script_tree "/script tree"
-  @ref F_ODB_Elog_Tree  "/elog tree"


See @RC_customize_intro "customizing the experiment" for more information. 


\htmlonly 
<script type="text/javascript">
pages( "RC_odbedit_examples",  "RunControl", "RC_mhttpd_Main_Status_page", "RC_mhttpd",  "" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly 

<br>
\anchor end
<!-- End of page RC_mhttpd -->
*/










<!-- ------------ M A I N  S T A T U S  P A G E  ------- -->

/*! \page RC_mhttpd_Main_Status_page Main Status Page 
\anchor idx_mhttpd_page_status

<br>
 
\htmlonly
<script type="text/javascript">
pages( "RC_mhttpd",  "RunControl","RC_mhttpd_status_page_features", "RC_mhttpd_Main_Status_page",  "end" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 <br>
 
@anchor RC_mhttpd_main_status
@section RC_mhttpd_msp_customized Status Page for a Running Experiment

The following image shows the main Status Page of one of the experiments at TRIUMF:

\Note  This example predates the addition of the @ref RC_Sequencer (<span class="new"> added  @ref ndf_jun_2011 </span>), therefore 
the <span class="button">Sequencer</span> button is not shown.


 * <center> 
 * <span class="image">MIDAS Status Page for a running experiment
 * <br><br><br>
 * \image html mhttpd_status.jpg
 * </span></center> 
 * <br>


 In this case, the experiment has been customized by
 - creating and starting some frontend(s), which define various equipment(s)
 - defining "script" and "alias" buttons
 - starting some of the MIDAS utilities (e.g. the MIDAS logger @ref F_mlogger_utility "mlogger" and the 
@ref F_lazylogger_utility "lazylogger" )

Compared with the @ref  RC_mhttpd_minimal_status_page "minimal status page" (where no clients are running) it's clear that the 
the Status Page above shows a lot more information.

The main status page will be discussed line-by-line in the following section ( @ref RC_mhttpd_status_page_features ).

 - \subpage RC_mhttpd_status_page_features
 - \subpage  RC_mhttpd_status_page_redesign


 
\htmlonly
<script type="text/javascript">
pages( "RC_mhttpd",  "RunControl","RC_mhttpd_status_page_features", "RC_mhttpd_Main_Status_page",  "" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly

\anchor end
*/
 <!-- ------------ end of M A I N  S T A T U S  P A G E  ------- -->


 
<!-- ------------ R E D E S I G N  O F  M A I N  S T A T U S  P A G E  -------

                   subpage of RC_mhttpd_Main_Status_page
-->
/*! \page  RC_mhttpd_status_page_redesign Redesign of mhttpd Main Status Page


\htmlonly
<script type="text/javascript">
pages( "RC_mhttpd_Main_Status_page",  "RunControl","RC_mhttpd_Main_Status_page", " RC_mhttpd_status_page_redesign",  "end" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly

\anchor idx_mhttpd_page_status

<br>
\anchor alias_buttons_status_page
<span class="new">
The appearance of the Main Status Page has been changed  (in versions after to @ref ndf_dec_2009) </span>.
<ul>
 <li> the \b "Analyzed" column has been dropped
 <li> the \b "FE Node" column is now labelled \b "Status" and may show equipment status information
 <li> the user-defined @ref RC_mhttpd_alias_buttons "alias",   @ref RC_mhttpd_status_script_buttons "script" and "custom" hyperlinks now appear as  \b buttons
 <li>  there are now four different background colors (@ref ndf_jan_2010) for the four rows of buttons, i.e. :
    <ul>
        <li> Main menu buttons,
        <li> Script buttons,
        <li> Manually triggered events,
        <li> Alias & Custom page buttons.
     </ul>

This change has been made because the original alias hyperlinks were hard to read if they included spaces.
It also gives a more homogeneous look to the page.  A status page of the new format is shown here.
</ul>

 * <br>
 * <center>
 * <span class="image">New format Status page showing four rows of buttons
 * <br><br><br>
 *  \image html new_status_page.png
 * </span></center> 
 * <br><br><br>

\anchor RC_mhttpd_old_alias_buttons
<span class="new"> Prior to  @ref ndf_dec_2009 </span> the Custom Page and Alias hyperlinks appeared as \b links rather than buttons,
as shown below:
<br><br><br>
 * <center>
 * <span class="image">Older version of mhttpd main Status page showing Custom Page and Alias \b Links
 *  \image html  old_status_opt_buttons.jpg
 * </span></center> 
 * <br><br><br>
  
\htmlonly
<script type="text/javascript">
pages( "RC_mhttpd_Main_Status_page",  "RunControl","RC_mhttpd_Main_Status_page", " RC_mhttpd_status_page_redesign",  "end" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 
\anchor end
 <br>
 <!-- ------------ end of R E D E S I G N  O F  M A I N  S T A T U S  P A G E  ------- -->
*/

 
<!-- ==========  S T A T U S    P A G E  : -     F E A T U R E S  =============== -->
/*! @page  RC_mhttpd_status_page_features Features of the Main Status Page
\htmlonly
<script type="text/javascript">
pages( "RC_mhttpd_Main_Status_page",  "RunControl","RC_mhttpd_defining_script_buttons", "RC_mhttpd_status_page_features",  "end" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
The Status Page is sub-divided in several parts:
 - @ref RC_mhttpd_status_title
 - @ref RC_mhttpd_status_menu_buttons 
        - @ref RC_mhttpd_status_RC_buttons
        - @ref RC_mhttpd_status_Page_buttons
 - Optional (user-defined) Buttons
      - @ref RC_mhttpd_status_script_buttons "Script Buttons"
      - @ref RC_mhttpd_status_Manual_Trigger_buttons
      - @ref RC_mhttpd_status_Alias_buttons
 - @ref RC_mhttpd_status_Run_info
 - Optional (user-defined) @ref RC_Display_Run_Parameters
      - @ref RC_Edit_RP
      - @ref RC_Status_Items
 - @ref RC_mhttpd_status_Equipment_info
 - @ref RC_mhttpd_status_Logger
 - @ref RC_mhttpd_status_latest_msg
 - @ref RC_mhttpd_status_clients

These will be discussed in detail in the following sections.
<br>
\anchor RC_mhttpd_main_status_new
 * <center>
 * <span class="image">mhttpd main status page showing Menu Buttons
 * <br><br><br>
 *  \image html new_status_buttons.jpg
 * </span></center> 
 * <br>

\Note  This example predates the addition of the @ref RC_Sequencer (<span class="new"> added  @ref ndf_jun_2011 </span>), therefore 
the <span class="button">Sequencer</span> button is not shown.

 
@section RC_mhttpd_status_title Experiment/Date/Refresh information

The top line on the main status page @ref RC_mhttpd_main_status_new "above" shows
 - the Experiment name ("Online")
 - the current date 
 - the refresh period (Refr:600) - see note below

\Note
It is important to note that the \b refresh of the Status Page is not "event driven" but is controlled by a 
timer whose rate is adjustable through the  @ref RC_mhttpd_Config_button "Config button".
This means the information at any given time may reflect the experiment state of up to
n seconds in the past, where n is the timer setting of the refresh parameter. 

<hr>

\anchor idx_mhttpd_buttons_menu
@section  RC_mhttpd_status_menu_buttons Menu buttons
The top row of buttons on the @ref RC_mhttpd_main_status_new "main status page" are the
 -  @ref RC_mhttpd_status_RC_buttons
 -  @ref RC_mhttpd_status_Page_buttons

<br><br>
\anchor idx_mhttpd_buttons_run-control
@subsection RC_mhttpd_status_RC_buttons Run Control buttons
Depending on the @ref RC_Run_States_and_Transitions  "run state", a single or the two first buttons
on the @ref  RC_mhttpd_main_status_new  "main status page"
will show the possible action that can be taken, i.e.

\anchor RC_table_run_state

<table style="text-align: center; width: 40%;" border="1" cellpadding="2"
cellspacing="2">
<caption>Run Control buttons visible depending on Run State
</caption>
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 255); text-align: center;"><span
style="font-weight: bold;">Run Control Buttons present</span><br>(see Note  @ref RC_mhttpd_note1 "below")<br>
</td>
<td
style="vertical-align: top; background-color: rgb(204, 204, 255); text-align: center;"><span
style="font-weight: bold;">Run State</span><br>
</td>
<td
style="vertical-align: top;  background-color: rgb(204, 204, 255); text-align: center;"><span
style="font-weight: bold;">Action</span><br>
</td>
</tr>
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">Start</span><br>
</td>
</tr>
</table>
</td>
<td style="vertical-align: top; background-color: rgb(255, 0, 0);">STOPPED<br>
</td>
<td
style="vertical-align: top; background-color: rgb(255, 255, 255);">Start
the run<br>
</td>
</tr>
<tr>

<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">Stop</span><br>
</td>
</tr>
</table>
</td>
<td colspan="1" rowspan="2"
style="vertical-align: top; background-color: rgb(51, 255, 51);">RUNNING<br>
</td>
<td
style="vertical-align: top; background-color: rgb(255, 255, 255);">Stop
the run<br>
</td>
</tr>
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">Pause</span><br>
</td>
</tr>
</table>
</td>
<td
style="vertical-align: top; background-color: rgb(255, 255, 255);">Pause
the run<br>
</td>
</tr>
<tr>

<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">Resume</span><br>
</td>
</tr>
</table>
</td>
<td colspan="1" rowspan="1"
style="vertical-align: top; background-color: rgb(255, 255, 0);">PAUSED<br>
</td>
<td
style="vertical-align: top; background-color: rgb(255, 255, 255);">Resume
the run<br>
</td>
</tr>
</table>

@anchor RC_mhttpd_note1
\Note
<span class="new">Since  @ref ndf_nov_2009 </span>, the Run Buttons may be hidden
(see @ref RC_Experiment_tree_keys "Hide Run Buttons" ),

<br><br>
\anchor idx_mhttpd_buttons_page-switch
@subsection RC_mhttpd_status_Page_buttons Page Switch buttons

The <b>Page Switch buttons</b> on the <span class="utility">mhttpd</span> main status page
(see  @ref RC_mhttpd_main_status_new "example above") change the page to one
of the sub-pages. The sub-pages all provide a <span class="button">Status</span>  button, which returns to the main Status page when clicked.
The purpose of each Page Switch button is explained in the following table:

\Note
The Page switch buttons can now be  @ref RC_ODB_Experiment_Tree "customized" ( <span class="new">since @ref ndf_dec_2009 </span>), 
so not all the possible Page Switch buttons may be visible on the status page for a particular experiment.



<table style="text-align: left; width: 100%;" border="1" cellpadding="2"
cellspacing="2">
<caption>Page Switch Buttons on the Main Status Page</caption>
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(204, 204, 255); ">Page Switch Button</td>
<td  style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(204, 204, 255); ">Explanation</td>
</tr>
<!-- Line 1  ODB  -->
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;"> @ref RC_mhttpd_ODB_page "ODB"</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
This button switches to the  (see @ref RC_mhttpd_ODB_page), which provides access to the Online Data Base.  
</td></tr>


<!-- Line 2 -->
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204); text-align: center;"><span
style="font-weight: bold;">@ref RC_mhttpd_MSCB_page "MSCB"</span><br>
</td>
</tr>
</table>
</td>
<td style="vertical-align: top;">
This button switches to the @ref RC_mhttpd_MSCB_page , which gives access to devices in a MIDAS Slow Control Bus system.
<span class="new">(Implemented @ref ndf_dec_2009)</span>

</td>
</tr>
<!-- Line 3 -->
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;"> @ref RC_mhttpd_CNAF_page "CNAF"</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
<span  class="new">In versions since @ref ndf_dec_2009 the default is that this button has been replaced by the <span class="button">MSCB</span> button.
If the  <span class="button">CNAF</span> button is needed, it must be added to the list of  @ref RC_ODB_Experiment_Tree "menu buttons"</span>.
<br>This button switches to the @ref RC_mhttpd_CNAF_page . If one of the equipments is a CAMAC frontend, it is possible to
issue CAMAC commands through this button.
</td></tr>
<tr>

<!-- Line 4 -->
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;"> @ref RC_mhttpd_Message_page "Messages"</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
Clicking this button opens the @ref RC_mhttpd_Message_page "message page" and shows the N last entries
of the   @ref F_Messaging  "MIDAS system message log".
The last entry is always present in the status page (see  @ref RC_mhttpd_status_latest_msg ).
</td></tr>
<tr>
<!-- Line 5 -->
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">@ref RC_mhttpd_Elog_page "ELog"</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
This button gives access to the Electronic Log book (Elog). The Elog allows
the permanent recording (i.e. in a file) of comments, messages, screen captures etc. composed 
by the users (see @ref RC_mhttpd_Elog_page).
</td></tr>
<tr>
<!-- Line 6 -->
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">@ref  RC_mhttpd_Alarm_page "Alarms"</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
Clicking this button displays the  @ref RC_mhttpd_Alarm_page , which shows the current Alarm setting 
for the entire experiment. The activation of an alarm is done through the ODB under the \b /Alarms
tree (See @ref RC_Alarm_System)
</td></tr>
<tr>

<!-- Line 7 -->
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">  @ref RC_mhttpd_Program_page "Programs"</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
This button gives access to the  @ref RC_mhttpd_Program_page, which displays the status of
the current programs (i.e. MIDAS applications/clients) which are or have been running
for this experiment.
</td></tr>

<!-- Line 8 -->
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">@ref RC_mhttpd_History_page "History"</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
Display History graphs of pre-defined variables.
   The history setting has to be done through ODB under the \b /History
   (see @ref F_History_logging , @ref RC_mhttpd_History_page).
</td></tr>


<!-- Line 9 -->
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; ">
\anchor  RC_mhttpd_Config_button
@anchor RC_mhttpd_refresh
<span
style="font-weight: bold;">@ref RC_mhttpd_Config_page "Config"</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
 Allows the <b> page refresh rate </b> to be changed. See @ref RC_mhttpd_Config_page .


</td></tr>


<!-- Line 10 -->
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; ">
\anchor  RC_mhttpd_Sequencer_button
<span
style="font-weight: bold;">@ref RC_mhttpd_Sequencer_page "Sequencer"</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
 Gives access to the @ref RC_mhttpd_Sequencer_page (<span class="new">Added @ref  ndf_jun_2011</span>).

</td></tr>

<!-- Line 11 -->
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">Help</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
<span class="button">Help</span> button will link to the main MIDAS web documentation (i.e. this document).
</td></tr>

</table>


<br><hr><br>

@section RC_mhpptd_optional_buttons Optional Buttons on the main Status page

 * <center>
 * <span class="image">mhttpd main Status page (part) showing optional buttons
 * <br>
 * \image html new_status_opt_buttons.jpg
 * </span></center> 
 * <br>

\Note 
<span class="new"> Since  @ref ndf_dec_2009 </span> there may be up to three rows of buttons below the Menu buttons 
 - Script (User) buttons
 - Manually triggered event buttons
 - Custom Page and Alias buttons

<span class="new"> Prior to  @ref ndf_dec_2009 </span> the Custom Page and Alias hyperlinks appeared as \b links rather than buttons,
as shown  @ref RC_mhttpd_old_alias_buttons "here".

<br><hr><br>  
\anchor idx_mhttpd_buttons_script
@subsection RC_mhttpd_status_script_buttons Optional Script buttons

Script (or User) buttons that appear on the @ref  RC_mhpptd_optional_buttons "main status page" are used to <b>execute user-defined scripts</b>. Users may define Script Buttons through the optional ODB <span class="odb">/script</span> tree.



See
 - \subpage  RC_mhttpd_defining_script_buttons "Defining script buttons" <!--  \level+2  subpage defined within a subsection -->  

for details.

<br><hr><br>
\anchor idx_manual-trigger_button
@subsection RC_mhttpd_status_Manual_Trigger_buttons Manual-Trigger Buttons

If the user has defined an event with a manual trigger, a button will appear on the main status page to enable
the user to trigger the event.  See @ref FE_manual_trigger .

<br><hr><br>
@subsection RC_mhttpd_status_Alias_buttons Alias-Buttons

User-defined  \b Alias-buttons that appear on the @ref  RC_mhpptd_optional_buttons "main status page"
give access to  @ref RC_mhttpd_Alias_page "Alias pages".

 - @ref  RC_mhttpd_alias_define

 
<br><hr><br>
 


@section RC_mhttpd_status_Run_info Run status information

 * <center>
 *  <span class="image">mhttpd status page showing Run Status information</span> 
 * \image html runstatus.jpg
 * </center><br>

 The run status information on the @ref RC_mhttpd_main_status "main status page"  shows 
 - current run number
 - @ref RC_table_run_state "run state"
 - Alarm system status
 - @ref F_Logger_Auto_Restart "Restart" (automatically restart run)
 - @ref RC_Sequencer status (see @ref seq_status "below")
 - mlogger status shows
     -  either "Logger not running" 
     -  or the saved data directory
 - run duration
 
The appearance and contents of this information changes depending on the conditions. The images below demonstrate
how the appearance may change when the run is in transition.

 * <center>
 *  <span class="image">mhttpd status page showing Run Status information when the run is stopping</span> 
 * \image html stoppingrun.jpg
 * </center><br>

 * <center>
 *  <span class="image">mhttpd status page showing Run Status information when the run is starting</span> 
 * \image html startingrun.jpg
 * </center><br>



\anchor seq_status
\NOTE
The appearance of the "Restart" box has been changed  (<span class ="new">in @ref  ndf_jun_2011</span>) to show the
 @ref RC_Sequencer  status.  

The following images show the status line under various conditions:
<ol>
 <li>  <span class="image">Auto run restart is \b disabled; Sequencer is \b NOT running</span> 
 * <br>
 * \image html run_status_seq1.png
 *<br>

 <li>  <span class="image">Auto run restart is \b enabled; Sequencer is \b NOT running</span> 
 * <br>
 * \image html run_status_seq2.png
 * <br>

 <li>  <span class="image">Sequencer \b IS running; run is in progress, Sequencer will restart run</span> 
 * <br>
 * \image html run_status_seq3.png
 * <br>

 <li>  <span class="image">Sequencer \b IS running; run is stopped, Sequencer will restart run </span> 
 * <br>  
 * \image html run_status_seq4.png
 * <br>

</ol> 




<br><hr><br>


@section RC_Display_Run_Parameters Display of run parameters

@subsection RC_Edit_RP Run Description and Comment

Optionally, the user can define a "Run Description" and/or a "Comment" that will appear on the mhttpd main status page.
This is done by creating keys
 \b "Comment" and/or \b "Run Description" in the   <span class="odb">/Experiment/</span>@ref  RC_Run_Parameters .
See  @ref  RC_ODB_Experiment_Tree for more information.

The contents of each key will then be displayed on an extra line on the <span class="utility">mhttpd</span> main status page. 

Typically, these keys would be displayed when a run is started (by setting them up as  
@ref RC_Edit_On_Start "Edit on start parameters"), so the user may enter appropriate messages.


\code
[local:t2kgas:S]/>ls -lt "/Experiment/Run Parameters/"
Key name                        Type    #Val  Size  Last Opn Mode Value
---------------------------------------------------------------------------
Comment                         STRING  1     32    19h  0   RWD   no beam, test only
Run Description                 STRING  1     32    19h  0   RWD  28.2keV resonant energy 7Li
\endcode


\NOTE

 - Since <span class="new"> @ref  ndf_feb_2011  </span> the keys that may be displayed on the main status page are no longer 
restricted to "Run Description" and "Comment". See @ref RC_Status_Items for details.
 - Since <span class ="new"> @ref  ndf_jun_2011</span> the "Run Description" parameter can also be set by the  @ref RC_Sequencer "Sequencer" command <span class="seq">\<RunDescription\></span>

 * <br>
 * <center>
 *  <span class="image">mhttpd main status page showing "Comment" and "Run Description" fields</span>
 * \image html runcomment.jpg
 * </center>
<br><hr><br>

@subsection RC_Status_Items Display of Status Items 

In addition to the  @ref RC_Edit_RP , additional items may  now (<span class="new">since  @ref  ndf_feb_2011  </span>)
be displayed on the main status page as  <b>"status items"</b>.  In the following example, a number of items have been
defined as  "status items", a  "run description" is defined, but a "comment" has not been defined.

 * <center>
 *  <span class="image">Main Status page showing <b>"Run Description" and "Status Items"</b> </span> 
 * \image html status_items.jpg
 * </center><br>

To define "status items", the user creates the optional  subdirectory <span class="odb">/Experiment/Status Items </span>.
The names and contents of any keys (or links to ODB keys) the user creates in this subdirectory
will be displayed on the main status page (see @ref  RC_ODB_Experiment_Tree for more details).  
The corresponding ODB keys that produced the "status items" in the example above are shown here: 

 * <center>
 *  <span class="image">Status Items defined in the ODB subdirectory "/Experiment/status items"  </span> 
 * \image html status_items_odb.png
 * </center><br>



<br><hr><br>
\anchor idx_mhttpd_page_status_equipment
@section RC_mhttpd_status_Equipment_info Equipment information and Event rates
The  <span class="utility">mhttpd</span> status page contains a table of  @ref FE_sw_equipment "Equipment"
information and event rates.  Equipments are usually defined in @ref FE_features "frontends". Other MIDAS clients which may define
Equipments include slow controls and eventbuilder clients.

 * <center>
 *  <span class="image">mhttpd status page showing Equipment information and Event rate statistics</span> 
 * \image html equipstatus1.jpg
 * </center>


@subsection RC_mhttpd_eq_variables Monitor the Equipment variables

The "Equipment" column of this table lists the names of any defined  @ref FE_sw_equipment "Equipments". These appear in the
order in which they are listed in the ODB  @ref FE_ODB_equipment_tree "/Equipment" tree.
 
The names of the equipment in this column are hyperlinks to their respective
<span class="odb">/Equipment/<equipment-name>/Variables</span> sub-tree.  
Clicking on any of the equipment links will show an @ref RC_mhttpd_Equipment_page ,
allowing a shortcut for the user to access the current values of the equipment.
<br><hr><br>

@subsection RC_mhttpd_eq_status Status display of each Equipment

The "Status" column of the @ref RC_mhttpd_status_Equipment_info "mhttpd status page"  shows the status of each equipment.
It usually shows the name of the client defining that equipment, and the host computer on which that client is running,
The background colour of each equipment  "Status" box will also change
depending on the status of the associated frontend. The usual colours are shown in the following table:

<center>
<table style="text-align: center; width: 40%;" border="1" cellpadding="2"
cellspacing="2">
<caption>Default colour coding of Equipment status
</caption>
<tr>
<td style="vertical-align: top; background-color: lime; text-align: center;">
Frontend is RUNNING and equipment is ENABLED
</td>
<tr>
<td style="vertical-align: top; background-color: red; text-align: center;">
Frontend is MISSING
</td>
</tr>
<tr>
<td style="vertical-align: top; background-color: yellow; text-align: center;">
Frontend is RUNNING but equipment is DISABLED
</td></tr></table>
<br>
</center>


When a run is in transition, or when a client takes a long time to respond, the status information may change to give
a status report on the client. Optionally, users may program a client to send their own status reports that appear in this area of the
mhttpd status page by incorporating calls to the routine <i>set_equipment_status</i>  (see  @ref FE_frontend_status).
This routine allows the message and the status box background colour to be specified. 
For example, the last client in the image above (HV_SY2527) gives a Status of "OK" rather than the
default client and hostname.

\Note
<span class="new">In versions prior to @ref ndf_dec_2009 </span>,
the "Status" column was labelled \b "FE Node" and the client status information was not shown
(see @ref RC_mhttpd_status_page_redesign ).

<br><hr><br>
\anchor idx_mhttpd_page_status_event-rate
@subsection RC_mhttpd_status_Event_Rates Event Rates
The event statistics for the current run are also shown on the @ref  RC_mhttpd_status_Equipment_info  "main status page" ,
in the columns labelled \b "Events", \b "Events[/s]" and \b "Data[MB/s]".

<br><hr><br>
@subsection RC_mhttpd_status_analyzer Number of events analyzed
<span class="new">In versions prior to @ref ndf_dec_2009 </span>, there is an extra column labelled  "analyzer"
which shows the number of events analyzed (valid only if the name of the analyzer is "Analyzer").

<br><hr><br>

@section RC_mhttpd_status_Logger Data Logging Information

The image below shows the information on the status page if both
@ref F_mlogger_utility "mlogger" and @ref F_lazylogger_utility "lazylogger" are running.

 * <center> 
 * <span class="image">logger information on mhttpd main status page</span>
 * <br><br><br>
 * \image html loggerstatus1.jpg
 * </center> 
 * <br>

Compare this example with the  @ref RC_mhttpd_minimal_status_page
"minimal" status page where neither of these clients are running.

<br>
In the image above,
 - one mlogger channel  (Channel 0) is active. <br>Multiple logger channels can be active,
in which case a line for each channel would be shown.
The hyperlink \b "0" opens a @ref  RC_mhttpd_Logger_page showing the settings information.
 - one lazylogger channel (\b Dcache ) is also active. Multiple lazy applications can be active, in which case
multiple lines of Lazy information would be present. Clicking on the hyperlink \b "Dcache" 
 opens a @ref  RC_mhttpd_Logger_page showing the  @ref RC_mhttpd_Logger_lazylogger .

\NOTE
The \b disk \b level is now displayed on the main status page (<span class="new">since @ref ndf_aug_2011</span>)
replacing the column "GB Total". The background colour changes according to how much room is left on the data disk:
 - <span style="background-color:lime">green</span> if disk is less than 70% full 
 -  <span style="background-color:yellow">yellow</span> if disk is between 70% and 90% full
 -  <span style="background-color:red">red</span> if disk is over 90% full 

 * <center> 
 * <span class="image">Example of disk level display on mhttpd main status page</span>
 * <br><br><br>
 * \image html disk_level.png
 * </center> 
 * <br>

<br><hr><br>


\anchor idx_message_last
@section RC_mhttpd_status_latest_msg Last system message
 * <center> 
 * <span class="image">Example of last system message on mhttpd main status page</span>
 * <br><br><br>
 * \image html lastmsg.jpg
 * </center> 
 * <br>


The last system message to be received at the time of the last display refresh is displayed  on the @ref RC_mhttpd_main_status "main status page" 
(see  @ref F_Messaging). More messages can be viewed
by pressing the   @ref RC_mhttpd_status_Page_buttons "Messages button". This opens the  
@ref RC_mhttpd_Message_page "Message page".


<br><hr><br>

\anchor idx_clients_active_mhttpd
@section RC_mhttpd_status_clients Active Client list
 * <center> 
 * <span class="image">Example of Active client list on mhttpd main status page</span>
 * <br><br><br>
 * \image html clientlist.jpg
 * </center> 
 * <br>

At the bottom  of the @ref RC_mhttpd_main_status "main status page" is a list of the MIDAS clients for this experiment that are currently active. The hostname is also shown. This information is derived from the
@ref  RC_odb_system_tree "ODB /System" tree .


<br><br>
   
\htmlonly
<script type="text/javascript">
pages( "RC_mhttpd_Main_Status_page",  "RunControl","RC_mhttpd_defining_script_buttons", "RC_mhttpd_status_page_features",  "" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 <br>
\anchor end
<!-- end of page RC_mhttpd_status_page_features -->

*/





<!-- ------------ S T A R T  P A G E  ------- -->

/*! \page RC_mhttpd_Start_page Start page
\anchor idx_mhttpd_page_start
<br>
 
\htmlonly
<script type="text/javascript">
pages( "RC_mhttpd_defining_script_buttons",  "RunControl","RC_mhttpd_ODB_page", "RC_mhttpd_Start_page",   "end" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 
<br>

To start a run, the <span class="button">Start</span> button (@ref RC_mhttpd_status_menu_buttons "if present") is pressed, and the user will be prompted for 
any defined experiment-specific parameters (i.e. @ref RC_Edit_On_Start "Edit on start" parameters)  before starting the run. The minimum set of parameters is
the <b> run number </b>, it will be incremented by one relative to the last value from
the status page.  The user may edit the run number  except @ref RC_Prevent_Edit_RN "where noted" before 
continuing.

 * <br><br><br>
 * <center> 
 * <span class="image"> Start run request page. In this case the user defined no run parameters.</span>
 * <br><br><br>
 *  \image html eos_rn.png
 * </center> 
 * <br><br><br>

Once the<span class="button">Start</span>  button is pressed on the Start request page, the system will attempt to start the
run. 

<span class="new">
Since  @ref ndf_jun_2009 , the
mhttpd function for starting and stopping runs now spawns an external helper program to handle the 
transition sequencing.  This helps with the old 
problem of looking at a blank screen for a long time if some frontends take a long time to process run 
transitions. mhttpd now returns immediately with a message <b>Run start/stop requested</b>  until it detects 
that the helper program is started and sets a message <b>runinfo/transition in progress</b> 
(until/unless the run state has changed).  Some aspects of this feature are present since rev 4473.
</span>

<br><hr><br>

@section RC_mhttpd_Edit_On_Start Run Start with defined /Experiment/Edit on Start tree 

If the user has defined  @ref RC_Edit_On_Start "Edit on Start parameters", when a run is started 
<span class="note">all the parameters in the 
ODB tree <span class="odb"> /Experiment/Edit on Start </span> will be displayed  </span> for possible modification.
 - Pressing  <span class="button">OK</span>  will proceed to start of the run. 
 - Pressing  <span class="button">Cancel</span>  will abort the start procedure, and return to the status page.

 * <br><br><br> 
 * <center>
 *  <span class="image">Start run request page. In this case the user has multiple  
@ref RC_Edit_On_Start "Edit-on-start parameters"  defined.</span>
 * <br><br><br>
 *  \image html mhstart.gif
 * </center>
 * <br><br><br>  

The title of each field is the ODB key name itself. If the keyname is not self-explanatory, more
explanation can be supplied by creating @ref RC_Edit_PC .


<br><hr><br>


@subsection RC_EOS_web_features Features available for mhttpd only

Several extra <b>Edit on start</b> features are available when using mhttpd 
to start the run, which are ignored by odbedit. These are described below:

- @ref RC_Edit_PC
- @ref RC_Edit_RP
- @ref RC_Prevent_Edit_RN 


<br><hr><br>

@subsection RC_Edit_PC Edit-on-start Parameter Comments

An optional subdirectory <b>Parameter Comments</b> can be created under  @ref  RC_ODB_Experiment_Tree to
display some extra text on the Start page under an <b>Edit on start</b> parameter. Usually the 
parameter names are self-explanatory, but the parameter name may not contain enough information. 
In this case, a <b>parameter comment</b> can be created by the user.  

This "parameter comment" option is visible \b ONLY under the MIDAS
web page (\b mhttpd ), the <b> odbedit start </b> command will not display this extra information.


The name of the parameter in the <b>Parameter Comments</b> subdirectory must match that of the <b>Edit on Start</b>
parameter. Comments may contain html tags if desired.
<br>
\note
If the parameter in Edit-on-start is a link which is named differently from the actual parameter,
then the parameter name in <b>Parameter Comments</b> must match the name of the actual parameter, rather than
the link-name.

This is illustrated below where the  <b>Edit on Start</b> parameter is a link named \b "number of channels", which
links to the actual parameter  <b> /sis/nchannels </b>.
@code
number of channels              LINK    1     15    22m  0   RWD  /sis/nchannels
@endcode
The parameter name in <b>Parameter Comments </b> for this parameter is 
nchannels               STRING  1     64    14m  0   RWD  <i>maximum 1024</i>
and NOT "number of channels".


@code
[local:midas:S]/Experiment>ls -lr
Key name                        Type   #Val  Size  Last Opn Mode Value
---------------------------------------------------------------------------
Experiment                      DIR
    Name                        STRING  1     32    17s  0   RWD  midas
    Edit on Start               DIR
        Write data              BOOL    1     4     16m  0   RWD  y
        enable                  BOOL    1     4     16m  0   RWD  n
        nchannels               INT     1     4     16m  0   RWD  0
        dwelling time (ns)      INT     1     4     16m  0   RWD  0


    Parameter Comments          DIR
        Write Data              STRING  1     64    44m  0   RWD  Enable logging
        enable                  STRING  1     64    7m   0   RWD  Scaler for expt B1 only
        nchannels               STRING  1     64    14m  0   RWD  <i>maximum 1024</i>
        dwelling time (ns)      STRING  1     64    8m   0   RWD  <b>Check hardware now</b>

[local:midas:S]Edit on Start>ls -l

Key name                        Type   #Val  Size  Last Opn Mode Value
---------------------------------------------------------------------------
Write Data                      LINK    1     19    50m  0   RWD  /logger/Write data
enable                          LINK    1     12    22m  0   RWD  /sis/enable
number of channels              LINK    1     15    22m  0   RWD  /sis/nchannels
dwelling time (ns)              LINK    1     24    12m  0   RWD  /sis/dwelling time (ns)
@endcode 

This results in a start run page as shown below.

@anchor RC_param_comment_example

 * <br><br><br>
 * <center>
 *  <span class="image">  Start run request page. Extra comment on the run condition is displayed below each
entry.
 * <br><br><br>
 *  \image html mhstart2.gif
 * </span></center>
 * <br><br><br>  

<hr><br>

@subsection RC_Prevent_Edit_RN Prevent the run number being edited at Run Start
@anchor RC_Edit_RN

By default, the user has the option to edit the run number at begin of run. To prevent this,
the user may add an optional key  <b>Edit run number</b> to the  <span class="odb">Edit on Start</span> subdirectory
in the  @ref  RC_ODB_Experiment_Tree. If this key
is set to "N", the user will not be able to edit the run number on the mhttpd start page at the begin of run. 

This feature is required where the run number is strictly controlled with a custom run number
checking system that assigns the run number automatically based on the type of run.

By creating the key
  <span class="odb">/Experiment/Edit on Start/Edit run number</span> 
  as a boolean variable, the ability of editing the run number is
  enabled or disabled, e.g.
@code 
[local:Default:S]Edit on start>create BOOL "Edit run number"
@endcode

By default, if this key is NOT present the run number IS editable.  

 * <br>
 * <center>
 *  <span class="image">Start run request page showing the run number write-protected.  
@ref RC_Edit_PC are also  defined.
 * <br><br><br> 
 *  \image html bnmr_start_fixedrn.gif
 * </span></center>
 * <br><br><br>  
<br>

\note This feature is ignored by  <span class="utility">odbedit</span>; regardless of whether  the key
<span class="odb">Edit run number</span> is present, the run number may be edited when starting a run using  <span class="utility">odbedit</span>.



<br><br><br>
 
\htmlonly
<script type="text/javascript">
pages("RC_mhttpd_defining_script_buttons", "RunControl","RC_mhttpd_ODB_page","RC_mhttpd_Start_page","" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>

\anchor end
<!-- end of page RC_mhttpd_Start_page -->
*/





<!-- ------------ O D B  P A G E  ------- -->

/*! \page RC_mhttpd_ODB_page ODB page
\anchor idx_mhttpd_page_ODB
<br>
 
\htmlonly
<script type="text/javascript">
pages("RC_mhttpd_Start_page", "RunControl", "RC_mhttpd_Equipment_page", "RC_mhttpd_ODB_page","end" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 
\anchor idx_edit_ODB_using-mhttpd
<br>

The ODB page is displayed by clicking on the  <span class="button">ODB</span>  @ref RC_mhttpd_status_Page_buttons "page switch button"
(@ref RC_mhttpd_status_Page_buttons "if present") on the @ref RC_mhttpd_main_status "main status page".

 * <br><br><br>
 * <center>
 *  <span class="image">  Clicking on  <span class="button">ODB</span>  will bring up a page showing the root tree of the ODB </span>
 * <br><br><br> 
 *  \image html mhttpd_odb_page.gif
 * </center> 
 * <br><br><br> 


The ODB page initially displays the ODB \b root \b tree. Clicking on the hyperlink "/", then one of the other hyperlinks ( e.g. "Equipment")  will take
you to the requested ODB field.  Depending on the  @ref RC_Access_Control "security", read/write access to any ODB field can be gained .

The ODB page includes the useful capabilities of \b editing the ODB values and \b creating or \b deleting new keys. But for copying ODB trees,
saving and reloading the ODB, re-ordering the keys etc., the much more powerful @ref RC_odbedit_utility "odbedit" utility must be used.
<br><br>

\b Examples:

- @ref RC_mhttpd_ODB_page_example1
- @ref RC_mhttpd_ODB_page_example2

@section RC_mhttpd_ODB_page_example1 Changing a variable

This example shows how to change the variable "PA" under the /Equipment/PA/Settings/Channels ODB directory.
If the ODB is @ref RC_Access_Control "Write protected" (as in the example below) a <b> popup window will request the
web password </b> before you can change a value.

 * <br><br><br>
 * <center>
 *  <span class="image">  ODB page access </span>
 * <br><br><br> 
 *  \image html mhedit.gif
 * </center> 
 * <br><br><br>  
<br>

@section RC_mhttpd_ODB_page_example2 Creating a subdirectory and an array

The following sequence shows how to
 - create the subdirectory \b "Settings" in the ODB tree <span class="odb">/Equipment/Detector</span>,
 - create an array called \b "Names" in the <span class="odb">Settings</span> subdirectory,
 - fill the first element of \b "Names" with the string \b "LeftFront"

 
 * <br><br><br>
 * <center>
 *  <span class="image">  Creating subdirectory "Settings" and the array "Names"
 * <br><br><br> 
 *  \image html mhttpd_create.gif
 * </span></center> 
 * <br><br><br> 
 
\htmlonly
<script type="text/javascript">
pages("RC_mhttpd_Start_page", "RunControl", "RC_mhttpd_Equipment_page", "RC_mhttpd_ODB_page","" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
\anchor end
<!-- end of Page  RC_mhttpd_ODB_page -->
*/

<!-- ------------ E Q U I P M E N T  P A G E  ------- -->

/*! \page RC_mhttpd_Equipment_page Equipment page
\anchor idx_mhttpd_page_equipment
<br>
 
\htmlonly
<script type="text/javascript">
pages( "RC_mhttpd_ODB_page", "RunControl", "RC_mhttpd_sc_page","RC_mhttpd_Equipment_page","end" ); // back index next {top bottom}
</script>
\endhtmlonly
 

<br><br>
\anchor idx_Equipment_data_display
@section  RC_mhttpd_Equipment_var  How to Display the Equipment Page

The \b Equipment \b Page is displayed by clicking on one of the @ref RC_mhttpd_Equipment_Hyperlink "Equipment Hyperlinks" on the  
@ref RC_mhttpd_main_status "main status page".
<br>
This provides a short-cut so the user may see the contents of the defined banks for that equipment
<b>providing that the data from the Equipment is being sent to the ODB</b>
because either

 - the @ref  FE_tbl_ReadOn "RO_ODB" flag  or
 - the @ref  FE_tbl_History "History value"

in the corresponding  @ref FE_Equipment_list is non-zero.

In this case, the  <span class="odb">/Equipment/<equipment-name>/Variables/</span> subdirectory ( where <i> "<equipment-name>" </i>
is replaced with the name of the defined equipment) is filled by the associated
frontend (see @ref FrontendOperation and   @ref FE_ODB_equipment_tree "the ODB /Equipment tree").
The data is written into array(s) with the same name(s) as the bankname(s).
 

<span class="note">

\Note The data of Equipments that do not have either of these flags set cannot be viewed in this way.
Instead it can be viewed with @ref RC_mdump_utility "mdump"  or an  @ref DA_analyzer_utility "analyzer".

</span>
<br>
@section RC_mhttpd_Equipment_Naming Naming the Equipment data

The Equipment data is  @ref RC_mhttpd_Equipment_var "displayed on the Equipment page" using either the \b default \b names or
<b>names assigned by the user</b>, if a \b "Names" array has been created.
The following examples illustrate both cases.

@subsection RC_mhttpd_Equipment_Examples Examples of named Equipment data

 - MIDAS format:
      - @ref RC_mhttpd_Equipment_example1
      - @ref  RC_mhttpd_Equipment_example2
      - @ref  RC_mhttpd_Equipment_example3
      - @ref  RC_mhttpd_Equipment_example4
      - @ref RC_mhttpd_Equipment_example5
 - FIXED format:
      - @ref RC_mhttpd_Equipment_example6
      - @ref RC_mhttpd_Equipment_example7
<br>

@subsubsection RC_mhttpd_Equipment_example1  Data from an Equipment with one bank using the default Names
\anchor RC_mhttpd_Equipment_Hyperlink
The main Status page from an experiment with two Equipments defined (\b "TpcGasPlc" and \b "Detector") is shown below. Clicking the
<b>Equipment Hyperlink</b>  "Detector"
(circled in green) will show the data from  <span class="odb">/Equipment/Detector/Variables</span>.
This illustration  shows how the mhttpd display combines the names of the variables in a 
@ref  FE_MIDAS_event_construction "MIDAS format" event with the variables read out in the equipment's data bank.
<br>
The "Detector" equipment has one bank only (SCLR) which is an array of 10 data words.
The "Names" column shows the default name, which is derived from the \b bankname and the array element number , i.e. "SCLR[0]...SCLR[9]".

 * <br><br><br>
 * <center>
 * <span class="image">  Clicking on the "Detector" Equipment Hyperlink shows SCLR bank contents with default Names
 * <br><br><br> 
 *  \image html gas_equipment_1banknoname.gif
 * </span></center> 
 * <br><br><br>  

The corresponding ODB data is shown below using @ref RC_odbedit_utility "odbedit". 

\code
[local:t2kgas:S]Variables>ls /Equipment/Detector/Variables -lt
Key name                        Type    #Val  Size  Last Opn Mode Value
---------------------------------------------------------------------------
SCLR                            DWORD   10    4     55m  0   RWD
                                        [0]             3453
                                        [1]             2701
                                        [2]             896
                                        [3]             4351
                                        [4]             2051
                                        [5]             1467
                                        [6]             1952
                                        [7]             4931
                                        [8]             783
                                        [9]             902

\endcode





<br><hr><br>
 
@subsubsection RC_mhttpd_Equipment_example2 Named data from an Equipment with one bank

It is often helpful to define an <b> individual name for each element of the databank</b>.
This is done by creating an array called \b "Names" in the
<span class="odb">/Equipment/<equipment-name>/Settings/</span> subdirectory, with the same number of elements as the databank.
This array is then filled by the user with a suitable name corresponding to each element in the databank.
This procedure is shown @ref  RC_mhttpd_ODB_page_example2 "here using the mhttpd ODB page commands" , or with @ref RC_odbedit_utility "odbedit"
below:

\code
[local:t2kgas:S]>cd /Equipment/Detector
[local:t2kgas:S]>mkdir Settings
[local:t2kgas:S]Detector>cd Settings
[local:t2kgas:S]Settings>create string Names[10]
String length [32]:
[local:t2kgas:S]Settings>set Names[0] LeftFront
[local:t2kgas:S]Settings>set Names[1] LeftCentre
[local:t2kgas:S]Settings>ls
Names
                                LeftFront
                                LeftCentre








[local:t2kgas:S]Settings>
\endcode
<br>
Now when the hyperlink "Detector" is clicked, the elements of the SCLR bank will be named using data from the \b Names array as follows:
<br>

 * <br><br><br>
 * <center>
 * <span class="image">  Clicking on "Detector" Equipment Hyperlink shows SCLR bank contents with defined Names
 * <br><br><br> 
 *  \image html gas_equipment_1namedbank.gif
 * </span></center> 
 * <br><br><br>  

 The complete \b Names array is shown below using @ref RC_odbedit_utility "odbedit" :

 \code
[local:t2kgas:S]settings>ls -lt
Key name                        Type    #Val  Size  Last Opn Mode Value
---------------------------------------------------------------------------
 Names                           STRING  10    32    22m  0   RWD
                                        [0]             LeftFront
                                        [1]             LeftCentre
                                        [2]             LeftBack
                                        [3]             RightFront
                                        [4]             RightCentre
                                        [5]             RightBack
                                        [6]             MidFront
                                        [7]             MidCentre
                                        [8]             MidBack
                                        [9]             Dump

\endcode                                        

<br><hr><br>

@subsubsection RC_mhttpd_Equipment_example3  Named data from an Equipment with two banks of the same length

Sometimes the data consists of more than one bank that corresponds to the same list of names, i.e. both banks have the
same length. In that case, the \b Names array will refer to both, e.g.
 * <br><br>
 * <center>
 * <span class="image">Clicking on "Detector"  Equipment Hyperlink shows SCLR and TDCT bank contents with the same defined Names
 * <br><br><br> 
 *  \image html gas_equipment_2banks.gif
 * </span></center> 
 * <br><br><br> 



The "Detector" equipment now has two banks (SCLR and TDCT) which are both arrays of 10 data words:

\code
[local:t2kgas:S]Variables>ls /Equipment/Detector/Variables -lt
Key name                        Type    #Val  Size  Last Opn Mode Value
---------------------------------------------------------------------------
SCLR                            DWORD   10    4     55m  0   RWD
                                        [0]             3453
                                        [1]             2701
                                        [2]             896
                                        [3]             4351
                                        [4]             2051
                                        [5]             1467
                                        [6]             1952
                                        [7]             4931
                                        [8]             783
                                        [9]             902  
TDCT                            FLOAT   10    4     3m   0   RWD
                                        [0]             503
                                        [1]             679
                                        [2]             321
                                        [3]             1072
                                        [4]             760
                                        [5]             2315
                                        [6]             474
                                        [7]             846
                                        [8]             39
                                        [9]             691



                                        
\endcode



 
<br><hr><br>

@subsubsection RC_mhttpd_Equipment_example4 Event containing two Named Banks of different sizes

If the equipment contains several banks that cannot share the same "Names[]" array, individual "Names" arrays
can be set up for each bank. The banks then may be of different lengths. The following examples shows an
equipment named "Target" that has two named banks, SCLR and TGT_ .

 * <br><br><br>
 * <center>
 * <span class="image"> Clicking on "Detector"  Equipment Hyperlink shows SCLR and  TGT_ bank contents each with defined Names
 * <br><br><br> 
 *  \image html gas_equipment.gif
 * </span></center> 
 * <br><br><br> 

In this case, instead of one "Names" array, an array has been defined for each bank of the form <i>"Names  <bankname>[<Len>]"</i>
where
 - <i>\<bankname\></i> is the \b name of the bank and
 - <i>\<Len\></i> is the \b length of the bank.

Note that two extra hyperlinks appear on the \b "Groups" line. These Group Hyperlinks are labelled as the name of each bank, and provide a
shortcut to the top of the bank, useful when the bank is very large.
 
Shown below are the contents of the arrays <b> "Names TGT_" </b>and <b>"Names SCAL"</b> in <span class="odb">/Equipment/target/settings</span>:
\code
ls /Equipment/target/settings
Names TGT_
                                Time
                                Cryostat vacuum
                                Heat Pipe pressure
                                Target pressure
                                Target temperature
                                Shield temperature
                                Diode temperature
                                Diode current
                                Laser intensity
                                gas pressure
                                gas temperature
Names SCAL
                                LSeg0
                                LSeg1
                                LSeg2
                                LSeg3
                                RSeg0
                                RSeg1
                                RSeg2
                                RSeg3
[local:t2kgas:S]/Equipment>

\endcode
and the contents of  <span class="odb">/Equipment/target/variables</span> showing the two corresponding banks \b TGT_ and \b SCAL :
\code

[local:t2kgas:S]/Equipment>ls /Equipment/target/variables
SCAL
                                3453
                                2701
                                896
                                4351
                                2051
                                1467
                                1952
TGT_
                                114059
                                4.661
                                23.16
                                -0.498
                                22.888
                                82.099
                                40
                                14.2
                                9.871
                                -70.9
\endcode

<br><hr><br>
 

@subsubsection RC_mhttpd_Equipment_example5 Names array Grouped for a large number of elements in a bank


This example shows the main status page of an experiment which has a number of Equipments defined. 
The Equipment Hyperlink of the Equipment \b "cycle_scalers" ( @ref  FE_MIDAS_event_construction "MIDAS format")
has been clicked. This hyperlink is circled in the following illustration. The resulting pages show the list of variables
in the bank HSCL. This large bank has been divided into the groups:

 - <b> All Back Front Scaler_B General</b>

The names of the Groups appear in the Groups line of the Equipment pages. The example shows the complete bank ("All" which is the default) as
well as the Groups of scalers which appears when each Group Hyperlink (circled) is pressed.  
  
\anchor RC_mhttpd_Equipment_image5
 * <br><br><br>
 * <center>
 * <span class="image">  Clicking on the Equipment Hyperlink "cycle_scalers" on Status page showing "All" scaler values, plus the defined Groups
 * <br><br><br> 
 *  \image html bnmr_equipment.gif
 * </span></center> 
 * <br><br><br>  

<br>

The illustration above shows how the mhttpd display combines the names of the variables in a 
@ref  FE_MIDAS_event_construction "MIDAS format" event with the variables read out in the Equipment's databank.
The \b "cycle_scalers" equipment has been set up 
in the ODB so that the scaler names are listed under the array \b "Names" in
<span class="odb">/Equipment/Cycle_Scalers/Settings</span>. Since there are a great many scalers in this one bank,
they have been divided into the groups "Back" "Front" "ScalerB" and "General"  in the \b Names array using a
<i>"<group>%"</i> construct as shown below:


\code
[local:bnmr:S]>cd /Equipment/Cycle_Scalers/Settings
[local:bnmr:S]Settings>ls
Names
                                Back%BSeg00
                                Back%BSeg01
                                Back%BSeg02
                                Back%BSeg03
                                Back%BSeg04
                                Back%BSeg05
                                Back%BSeg06
                                Back%BSeg07
                                Back%BSeg08
                                Back%BSeg09
                                Back%BSeg10
                                Back%BSeg11
                                Back%BSeg12
                                Back%BSeg13
                                Back%BSeg14
                                Back%BSeg15
                                Front%FSeg00
                                Front%FSeg01
                                Front%FSeg02
                                Front%FSeg03
                                Front%FSeg04
                                Front%FSeg05
                                Front%FSeg06
                                Front%FSeg07
                                Front%FSeg08
                                Front%FSeg09
                                Front%FSeg10
                                Front%FSeg11
                                Front%FSeg12
                                Front%FSeg13
                                Front%FSeg14
                                Front%FSeg15
                                Scaler_B%SIS Ref pulse
                                Scaler_B%Fluor. mon 2
                                Scaler_B%Polariz Left
                                Scaler_B%Polariz Right
                                Scaler_B%Neutral Beam B1
                                Scaler_B%Neutral Beam B2
                                Scaler_B%Neutral Beam B3
                                Scaler_B%Neutral Beam B4
                                Scaler_B%Neutral Beam F1
                                Scaler_B%Neutral Beam F2
                                Scaler_B%Neutral Beam F3
                                Scaler_B%Neutral Beam F4
                                General%Back Userbit=0
                                General%Back Userbit=1
                                General%Back Userbit=2
                                General%Back Userbit=3
                                General%Front Userbit=0
                                General%Front Userbit=1
                                General%Front Userbit=2
                                General%Front Userbit=3
                                General%Back Cycle Sum
                                General%Front Cycle Sum
                                General%B/F Cycle
                                General%Asym Cycle
                                General%Pol Cycle Sum
                                General%Pol Cycle Asym
                                General%NeutBm Cycle Sum
                                General%NeutBm Cycle Asym
[local:bnmr:S]Settings> 
\endcode




<br><hr><br>
 
@subsubsection RC_mhttpd_Equipment_example6 Fixed-Format event with named Variables
 
An example of a  @ref FE_FIXED_event_readout "FIXED format" event is shown below.
The equipment \b "Info ODB" is defined as FIXED-format. The variables are of different types, 
so cannot be output as a MIDAS event. In this example, there is no information listed in the subdirectory 
<span class="odb">Settings</span> for this equipment. The name of each element is listed in the <span class="odb">"Variables"</span> subtree.
The <span class="odb">Settings</span> subtree is not defined.

 * <br><br><br>
 * <center>
 * <span class="image">  Clicking on the "Info ODB" Equipment Hyperlink on Status page showing the FIXED format event 
 * <br><br><br> 
 *  \image html bnmr_info_odb.gif
 * </span></center> 
 * <br><br><br>  



\code
[local:bnmr:S]Settings>ls "/Equipment/Info ODB/"
Common
Statistics
Variables
\endcode

The names of the variables for this FIXED-format event are in the <span class="odb">/Equipment/Info ODB/Variables</span> subtree, i.e.

\code
[local:bnmr:S]>ls -lt "/Equipment/Info ODB/Variables"
Key name                        Type    #Val  Size  Last Opn Mode Value
---------------------------------------------------------------------------
helicity                        DWORD   1     4     8h   0   RWD  0
current cycle                   DWORD   1     4     8h   0   RWD  710
cancelled cycle                 DWORD   1     4     8h   0   RWD  9
current scan                    DWORD   1     4     8h   0   RWD  13
Ref HelUp thr                   DOUBLE  1     8     8h   0   RWD  6626873
Ref HelDown thr                 DOUBLE  1     8     8h   0   RWD  6626873
Current HelUp thr               DOUBLE  1     8     8h   0   RWD  6659381
Current HelDown thr             DOUBLE  1     8     8h   0   RWD  75
Prev HelUp thr                  DOUBLE  1     8     8h   0   RWD  6652944
Prev HelDown thr                DOUBLE  1     8     8h   0   RWD  133
RF state                        DWORD   1     4     8h   0   RWD  0
Fluor monitor counts            DWORD   1     4     8h   0   RWD  0
EpicsDev Set(V)                 FLOAT   1     4     8h   0   RWD  0
EpicsDev Read(V)                FLOAT   1     4     8h   0   RWD  0
Campdev set                     FLOAT   1     4     8h   0   RWD  0
Campdev read                    FLOAT   1     4     8h   0   RWD  0
Laser Power(V)                  FLOAT   1     4     8h   0   RWD  0
last failed thr test            DWORD   1     4     8h   0   RWD  0
cycle when last failed thr      DWORD   1     4     8h   0   RWD  710
last good hel                   DWORD   1     4     8h   0   RWD  1
ncycle sk tol                   DWORD   1     4     8h   0   RWD  2
hel_read                        DWORD   1     4     8h   0   RWD  9
[local:bnmr:S]>  
\endcode


@subsubsection RC_mhttpd_Equipment_example7 Fixed-Format event with defined Names array
Alternatively, if the FIXED format event consists of an array , a "Names" array can be defined in the same way as for the MIDAS event.
In this case, each element of the array under "Variables" will be referenced using the equivalent elements of the "Settings/Names" array,
as shown in the following example:
 * <br><br><br>
 * <center>
 * <span class="image">  FIXED format event with a  "Names" array defined 
 * <br><br><br> 
 *  \image html parameters.png
 * </span></center> 
 * <br><br><br>  

This event is defined as follows: 

\code
 
[local:t2kgas:S]/>cd /Equipment/parameters

[local:t2kgas:S]/parameters>ls  -rlt
    ...............
    Variables                   DIR
        IODB                    STRING  5     32    26m  0   RWD
                                        [0]             123352
                                        [1]             pulse
                                        [2]             43.21
                                        [3]             DRT_9
                                        [4]             0.321
    settings                    DIR
        Names                   STRING  5     32    10m  0   RWD
                                        [0]             Rejected
                                        [1]             Type
                                        [2]             LTX Voltage
                                        [3]             Trig type
                                        [4]             PXV Current
\endcode                                     
<br>
 
\htmlonly
<script type="text/javascript">
pages( "RC_mhttpd_ODB_page", "RunControl", "RC_mhttpd_sc_page","RC_mhttpd_Equipment_page","" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
\anchor end
<!-- end of Page RC_mhttpd_Equipment_page -->
*/

<!-- ------------ S L O W  C O N T R O L   P A G E  ------- -->

/*! \page  RC_mhttpd_sc_page Slow Control page
\anchor idx_mhttpd_page_slow-control
<br>
 
\htmlonly
<script type="text/javascript">
pages("RC_mhttpd_Equipment_page",  "RunControl","RC_mhttpd_CNAF_page", "RC_mhttpd_sc_page","end" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
@section RC_mhttpd_slow_control_intro Introduction
The Slow Control page refers to the specific display of a <b>Slow Control Equipment</b> (see @ref  FE_Slow_Control_system). 
This is a special @ref RC_mhttpd_Equipment_page "Equipment page" that may be accessed from the  @ref RC_mhttpd_main_status "main status page"
by clicking on the @ref  RC_mhttpd_Equipment_Hyperlink "Equipment Hyperlink". The Slow Control page 
will show a parameter table (such as those shown below). Parameters that are editable will be hyperlinked for parameter modification.
This option is possible only if the parameter names have a particular \b name \b syntax.
 
@section RC_mhttpd_slow_control_name_syntax Name Syntax for Slow Control Page

The name syntax is similar to that already described on the  @ref RC_mhttpd_Equipment_page "Equipment Page", where the Equipment variables are located
in the <span class="odb">/Equipment/<equipment-name>/Variables</span> subtree with the matching information defined under the
<span class="odb">/Equipment/<equipment-name>/Settings</span> subtree.  Additinally, for a Slow Control Equipment  
each variable in the table may be \b editable depending on the following rules :

- If the variable name is defined  under the <span class="odb">"Settings/"</span> directory
   -# as one of the following names, it will be editable by default:
        - in a \b "Demand" array or
        - in an \b "Output" array or
        - as \b "D_<var_name>"
    
   -# the variable is ALSO defined under the array<span class="odb">"Settings/Editable[]"</span>
        -  it will be editable.


 This information will be combined to compose a table.
@code
[local:Default:S]/>cd Equipment/MSCB/Settings/
[local:Default:S]Settings>ls
[local:Default:S]Settings>ls
Names
                                Drift Voltage (KV)
                                Drift Current (uA)
                                uC Temperature (C)
DD
Offset
                                0
                                1
                                1
Gain
                                0
                                3
                                4
Editable                        Gain
@endcode

 * <br><br><br>
 * <center>
 *  <span class="image">  Slow control Equipment page.
 * <br><br><br>
 *  \image html mhsceqp.jpg
 * </span></center>
 * <br><br><br>  


The following is an example of a Slow Control Page from another experiment, showing a High Voltage system for two crates,
with  multiple parameters set up.

 * <br><br><br>
 * <center>
 *  <span class="image">  Slow control page for a High Voltage system.
 * <br><br><br>
 *  \image html mhsc.gif
 * </span></center>
 * <br><br><br>  

<br>
 
\htmlonly
<script type="text/javascript">
pages("RC_mhttpd_Equipment_page",  "RunControl","RC_mhttpd_CNAF_page", "RC_mhttpd_sc_page","" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>

\anchor end
<!-- End of RC_mhttpd_sc_page -->
*/


<!-- ------------ C N A F    P A G E  ------- -->

/*! \page   RC_mhttpd_CNAF_page CAMAC Access page 
\anchor idx_mhttpd_page_CNAF
<br>
 
\htmlonly
<script type="text/javascript">
pages("RC_mhttpd_sc_page",  "RunControl", "RC_mhttpd_Message_page", "RC_mhttpd_CNAF_page","end" ); // back index next {top bottom}
</script>
\endhtmlonly
 

<br>
\NOTE
<span class="new">By default, the CNAF page has been replaced by the MSCB Page (@ref ndf_dec_2009) </span>


<br>
The CNAF page is accessed by clicking on the @ref RC_mhttpd_status_Page_buttons "CNAF button"  (@ref RC_mhttpd_status_Page_buttons "if present")
on the Main Status page.  <span  class="new">In versions since @ref ndf_dec_2009 the default is that this button has been replaced by the <span class="button">MSCB</span> button.
<br>

If one of the active equipments is a CAMAC-based data collector, it will be possible to
remotely access CAMAC through this web-based CAMAC page,  in which case the frontend is acting as a
RPC CAMAC server for the request.  
<br>
The status of the connection
is displayed in the top right hand side corner of the window.

 * <br><br><br>
 * <center>
 *  <span class="image">  CAMAC command pages.
 * <br><br><br> 
 *  \image html mhcnaf.gif
 * </span></center>
 * <br><br><br>  



<br>
 
\htmlonly
<script type="text/javascript">
pages("RC_mhttpd_sc_page",  "RunControl", "RC_mhttpd_Message_page", "RC_mhttpd_CNAF_page","" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>

\anchor end
<!-- end of RC_mhttpd_CNAF_page -->
*/


<!-- ------------ M E S S A G E   P A G E  ------- -->

/*! \page    RC_mhttpd_Message_page Message page
\anchor idx_mhttpd_page_message
<br>
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages("RC_mhttpd_CNAF_page",  "RunControl","RC_mhttpd_Elog_page", "RC_mhttpd_Message_page", "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>

This page (accessed by clicking the @ref RC_mhttpd_status_Page_buttons "Message button"  @ref RC_mhttpd_status_Page_buttons "if present"
 on the @ref RC_mhttpd_main_status "main status page" )
displays the contents of the MIDAS System log file in blocks of 100 lines
starting with the most recent messages. The MIDAS log file resides in the directory
defined @ref  F_Log_File "in the ODB".


 * <br><br><br>
 * <center>
 *  <span class="image">  Message page.
 * <br><br><br>
 *  \image html mhmes.gif
 * </span></center>
 * <br><br><br>  

<br>
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages("RC_mhttpd_CNAF_page",  "RunControl","RC_mhttpd_Elog_page", "RC_mhttpd_Message_page", "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
\anchor end
<!-- end of page RC_mhttpd_Message_page -->
*/

<!-- ------------ E L O G   P A G E  ------- -->

/*! \page   RC_mhttpd_Elog_page Elog page
\anchor idx_mhttpd_page_elog
<br>
 
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Message_page", "RunControl", "RC_mhttpd_Program_page", "RC_mhttpd_Elog_page", "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>

\anchor Elog_200

@section RC_mhttpd_Elog_intro Introduction
The ELOG page  (accessed by clicking the @ref RC_mhttpd_status_Page_buttons "Elog button"  @ref RC_mhttpd_status_Page_buttons "if present"
 on the @ref RC_mhttpd_main_status "main status page" ) provides access to an electronic logbook. 
This tool can replace the 
experimental logbook for daily entries. The main advantage of the Elog over a paper logbook  is the possiblity 
to access it remotely, and provide a general knowledge of the experiment.
On the other hand, the Elog is not limited strictly to experiments. Worldwide Elog implementations can be found 
on the internet.

Two different implementations of the Elog are available i.e
 - @ref RC_mhttpd_Internal_Elog where the Elog is built in the mhttpd MIDAS web interface, or 
 - @ref RC_mhttpd_External_Elog where the Elog runs independently from the experiment and  mhttpd as well.


While the Internal implementation doesn't requires any setup, the External implementation requires a proper
Elog installation which is fully described on the
<a href="http://midas.psi.ch/elog/">Elog</a> web site.
The External Elog implementation also requires a dedicated entry in the ODB as shown in the code below. It also requires
the package \b Elog to be already installed, and properly configured. Once the ODB entry is present, the internal 
ELOG is disabled.
<br>
The Elog is @ref  F_Elog_Custom "customized" through the ODB <span class="odb">/Elog</span> tree.


<hr> 
\anchor idx_Elog_internal
@subsection RC_mhttpd_Internal_Elog  Internal Elog

By default the mhttpd provides the internal Elog. The entry destination directory is established by the logger key in ODB (see @ref  F_Logger_Elog_Dir "Elog Dir").
The Electronic Log page shows the most recent Log message recorded in the system. The top buttons allows you to either <b>Create/Edit/Reply/Query/Show</b> a message

 * <br><br><br>
 * <center>
 *  <span class="image">  main Elog page.
 * <br><br><br>
 *  \image html mhelog.gif
* </span></center>
 * <br><br><br>  

The format of the message log can be written in HTML format.

 * <br><br><br>
 * <center>
 *  <span class="image">  HTML Elog message.
 * <br><br><br>
 *  \image html mheloghtml.gif
 * </span></center>
 * <br><br><br>  

@subsubsection RC_mhttpd_Internal_Elog_shift_check The Shift Check button
\anchor idx_elog_shift-check-form

- A feature of the Elog entry page is the optional <b>Shift Check</b> button, which permits the 
experimenter on shift to go through a checklist and record his/her findings in the Elog
system. The checklist is user-defined and can be found in the ODB under  the @ref F_ODB_Elog_Tree "/Elog tree".
In the following example, a Shift Check button <span class="button">Gas Handling</span> has been created:

 * <br><br><br>
 * <center>
 *  <span class="image">  HTML Elog message.
 * <br><br><br>
 *  \image html melogforms.png
 * </span></center>
 * <br><br><br>  

- The code below generates the above screen. The key <i>Gas Handling</i> contains all the 
information for a given form. There is no limit to the number of entries. By specifying
an entry with the name <i>Attachment0</i>,<i>Attachment1</i>,... and filling it with a fixed file
name, its content will be attached to the Elog entry for every shift report. 

@code
[local:myexpt:Running]/>cd /Elog/
[local:myexpt:Running]/Elog>mkdir Forms
[local:myexpt:Running]/Elog>cd Forms/
[local:myexpt:Running]Forms>mkdir "Gas Handling"
[local:myexpt:Running]Forms>cd "Gas Handling"
[local:myexpt:Running]Gas Handling>create string "N2 Pressure"
String length [32]: 
[local:myexpt:Running]Gas Handling>create string "Vessel Temperature"
String length [32]: 
[local:myexpt:Running]Gas Handling>ls
N2 pressure              
Vessel Temperature              
[local:myexpt:Running]Gas Handling>
[local:xenon:Running]Gas Handling>create string Attachment0 
String length [32]: 64
[local:xenon:Running]Gas Handling>set Attachment0 Gaslog.txt
@endcode


@subsubsection RC_mhttpd_Internal_Elog_runlog Runlog Button

- Clicking the  <span class="button">Runlog</span> button will display the content of the file \b runlog.txt which is
expected to be in the data directory specified by the ODB key <b>/Logger/Data Dir</b>.
Regardless of its content, it will be displayed in the web page.
Its common use is to \b append \b lines after every run.
The client appending this run information can be any of the MIDAS applications.
An <b> example </b> is available in the <i>examples/experiment/analyzer.c</i> which
will write some statistical information at end-of-run to the file runlog.txt


 * <br><br><br>
 * <center>
 *  <span class="image">  Elog page, Runlog display.
 * <br><br><br> 
 *  \image html mhelogrun.gif
  * </span></center> * <br><br><br>  

- When composing a new entry into the Elog, several fields are available to specify
the nature of the message i.e: Author, Type, System, Subject. Under Type and
System a pulldown menu provides a choice of categories. These categories are user definable
through the <span class="odb">/Elog</span> ODB tree under the keys  @ref F_Types "Types" and $ref F_Systems "Systems". The number of categories
is limited to 20 maximum. Any usused fields can be left empty.

 * <br><br><br>
 * <center>
 *  <span class="image">  Elog page, New Elog entry form.
 * <br><br><br> 
 *  \image html mhelognew.gif
 * </span></center> 
 * <br><br><br>  

<hr> 
\anchor idx_Elog_external
@subsection RC_mhttpd_External_Elog  External Elog
The advantage of using the external Elog over the built-in version is its flexibility.
This package is used worldwide and improvements are constantly being made. A full-features
documentation and standalone installation can be found at the
<a href="http://midas.psi.ch/elog/">Elog</a> web site.

Installation requires requires several steps described below.

<ul>
<li> Download the Elog package from the web site mentioned above.
   <ul>
   <li> Windows, Linux, Mac version can be found there. Simple installation procedures
   are also described. Its installation can be done at the system level or at the
   user level. The Elog can service multiple Electronic logbooks in parallel and 
   therefore an extra entry in its configuration file can provide specific experimental
   elog in a similar fashion as the internal one.

   <li> You need to take note of several consideration for its installation.
   Several locations are required for the different files that elog deals with.
      <ul>
      <li> elog resource directory ( e.g. /elog_installation_dir where elog is installed)
      <li> logbook directory (ex: /myexpt/logbook where the pwd and elog entries are stored).
      </ul>
   <li>The pwd file uses encryption for the user password.
   <li> As this Elog installation is tailored towards an experiment, a restriction applies i.e.
         <i> ensure that the mhttpd and elog applications shares at least the same file system.</i>
   <br>This means that either
       <ul> 
        <li> both applications runs on the same machine or 
        <li> a nsf mount provides file sharing.
        </ul>
  <li> You need to know the node and ports for both applications. Like mhttpd, elogd also requires a
    port number for communication through the web (e.g. NodeA:mhttpd -p 8080, NodeB:elogd -p 8081).
  -# copy the default midas/src/elogd.cfg from the MIDAS distrbution to your operating directory.
  -# modify the elogd.cfg to reflect your configuration
  @code
  # This is a simple elogd configuration file to work with MIDAS
  # $Id: mhttpd.dox 4032 2007-11-02 17:13:52Z amaudruz $ 

  [global]
  ; port under which elogd should run
  port = 8081                             
  ; password file, created under 'logbook dir'
  password file = elog.pwd                
  ; directory under which elog was installed (themes etc.)
  resource dir = /elog_installation_dir     
  ; directory where the password file will end up
  logbook dir = /myexpt/logbook     
  ; anyone can create it's own account
  self register = 1                       
  ; URL under which elogd is accessible
  url = http://ladd00.triumf.ca:8081      
  ; the "main" tab will bring you back to mhttpd
  main tab = Xenon                        
  ; this is the URL of mhttpd which must run on a different port
  main tab url = http://NodeA:8080
  ; only needed for email notifications
  smtp host = your.smtp.host              
  ; Define one logbook for online use. Severl logbooks can be defined here
  [MyOnline]
  ; directory where the logfiles will be written to
  Data dir = /myexpt/logbook            
  Comment = My MIDAS Experiment Electronic Logbook
  ; mimic old mhttpd behaviour
  Attributes = Run number, Author, Type, System, Subject     
  Options Type = Routine, Shift Summary, Minor Error, Severe Error, Fix, Question, Info, Modification, Alarm, Test, Other, 
  Options System = General, DAQ, Detector, Electronics, Target, Beamline
  Extendable Options = Type, System
  ; This substitution will enter the current run number
  Preset Run number = $shell(odbedit -e myexpt -h NodeA -d Runinfo -c 'ls -v \"run number\"')    
  Preset Author = $long_name
  Required Attributes = Type, Subject
  ; Run number and Author cannot be changed
  Locked Attributes = Run number, Author  
  Page Title = ELOG - $subject
  Reverse sort = 1
  Quick filter = Date, Type, Author
  ; Don't send any emails
  Suppress email to users = 1             
@endcode
  -# start the elog daemon. <b>-x</b> is for the shell substitution of the
    command <i>Preset Run number = $shell(...)</i>
    The argument invokes the odbedit remotely if needed to retrieve the current run number.
    You will have to ensure the proper path to the odbedit and the proper -e, -h argments for
    the experiment and host. You may want to verify this command from the console.
@code
  NodeB:~>/installation_elog_dir/elogd -c elogd.cfg -x
@endcode
  -# start the mhttpd at its correct port and possibly in the daemon form.
@code
  NodeA:~>mhttpd -p 8080 -D 
@endcode
  -# At this point the Elog from the MIDAS web page is accessing the internal Elog.
    To activate the external Elog, include in the ODB two entries such as:
@code
   NodeX:> odbedit -e myexpt -h NodeA
   [NodeX:myexpt:Running]/>cd elog
   [NodeX:myexpt:Running]/Elog>create string Url
   String length [32]: 64
   [NodeX:myexpt:Running]/Elog>set Url http://NodeB:8081/MyOnline
   [NodeX:myexpt:Running]
   [NodeX:myexpt:Running]/Elog>create string "Logbook Dir"
   String length [32]: 64
   [NodeX:myexpt:Running]/Elog>set "Logbook Dir" /myexpt/logbook

   [NodeX:myexpt:Running]/Elog>ls
Logbook Dir                     /home/myexpt/ElogBook
Url                             http://NodeB:8081/MyOnline
@endcode
  -# Confirm proper operation of the external Elog by creating an entry. You will be
    prompted for a username and password. Click on New registration. Full control of 
    these features are described in the Elog documentation.
  -# Stop and restart the Elogd in the background. 
@code
   NodeB:~>/installation_elog_dir/elogd -c elogd.cfg -x -D
@endcode
  -# In the event you had a previous entry under the internal elog, you can convert the
    internal to external using the elconv tool.
@code
   NodeB:~> cp internal/elog_logbook/*.log /myexpt/logbook/.
   NodeB:~> cd /myexpt/logbook
   NodeB:~> /installation_elog_dir/elconv
@endcode

</ul></ul><br>
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Message_page", "RunControl", "RC_mhttpd_Program_page", "RC_mhttpd_Elog_page", "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
\anchor end
<!-- end of page RC_mhttpd_Elog_page -->
*/


<!-- ------------ P R O G R A M   P A G E  ------- -->

/*! \page   RC_mhttpd_Program_page Programs page 
\anchor idx_mhttpd_page_program
<br>
 
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages(  "RC_mhttpd_Elog_page", "RunControl",  "RC_mhttpd_History_page", "RC_mhttpd_Program_page", "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
The \b Programs page is displayed by clicking on the  <span class="button">Programs</span> button on the  @ref RC_mhttpd_Main_Status_page
( @ref RC_mhttpd_status_Page_buttons "if present").


This page presents the current active list of the clients  attached to the given
experiment. On the right hand side, a dedicated button allows the user to stop a particular client.
This is equivalent to the @ref RC_odbedit_sh "ODBedit shutdown" command. For example, pressing
the  <span class="button">stop Speaker</span> button  (see example below) would be equivalent to 
@code
odbedit> sh Speaker
@endcode

Clicking the client name hyperlink (on the left hand side of the page) pops up a new window pointing to the 
ODB <b>/Programs</b> subdirectory related to that particular client (see @ref RC_ODB_Programs_Tree). 
Example 1 shows the Programs page with a number of clients running. The hyperlink for the client \b ltnoRC has been clicked,
and the popup window shows the ODB path <b>/Programs/ltnoRC</b>. 

 * <br><br><br>
 * <center>
 * <span class="image">
 * Example 1: mhttpd Programs page.
 * <br><br><br>
 *  \image html mhprg.gif
* </span>
 * </center>
 * <br><br><br>
 
The ODB structure for  @ref RC_ODB_programs_client "each client" should be  customized by the 
user (see @ref  RC_customize_Programs_tree ). 
<br>
\note The buttons and other information that appears on the \b Programs mhttpd
page depends on the settings of the fields of the /Programs/\<\em client \> subdirectory.


\anchor RC_mhttpd_Required
Example 2  shows the case where \b mlogger is running, but is not \b Required 
(i.e. @ref RC_programs_Required "/Programs/logger/required" is false). When \b mlogger is stopped by pressing the
key <b>"Stop Logger"</b> on the \b Programs page,  the \b Logger program is no longer displayed.
This is because <span class="note"> clients which are not \b Required are not shown in the \b Programs page unless they are running.</span>



 * <br><br><br>
 * <center>
 * <span class="image">
 * Example 2: Programs page - mlogger utility is not  @ref  RC_mhttpd_Required "Required" 
 * <br><br><br>
 *  \image html program1.png
 * </span>
 * </center>
 * <br><br><br>

In Example 3, mlogger's  @ref RC_mhttpd_Required "Required" flag has been set true. 
In this case, when mlogger is stopped
the line for the Logger program is retained. Because a   @ref RC_programs_Start_command "Start Command" 
has been supplied, the <b>"Start Logger" 
button</b> is displayed. Pressing this will cause the <b>Start Command</b> to be issued, and mlogger should start.
The <b> /Programs/\< \em client \> tree </b> also provides for a client to be @ref RC_customize_Programs_tree 
"automatically started or restarted".

Note that an  @ref RC_programs_Alarm_class "Alarm Class" has also been supplied, giving rise to the <b>Alarm banner</b> 
on the main status page. See  @ref  RC_Alarm_System for details.

 * <br><br><br><center>
 * <span class="image">
 * Example 3: Programs page - mlogger utility \b is  @ref RC_programs_Required "Required" and an alarm class has been specified
 * <br><br><br>
 *  \image html program.png
 * </span></center>
 * <br><br><br>



<br>
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages(  "RC_mhttpd_Elog_page", "RunControl",  "RC_mhttpd_History_page", "RC_mhttpd_Program_page", "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
\anchor end
<!-- end of page RC_mhttpd_Program_page -->
*/


<!-- ------------ H I S T O R Y   P A G E  ------- -->

/*! \page  RC_mhttpd_History_page History page
\anchor idx_mhttpd_page_history
<br>
 
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Program_page",  "RunControl",  "RC_mhttpd_Alarm_page", "RC_mhttpd_History_page", "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
The \b History page is displayed by clicking on the  <span class="button">History</span> Button on the  @ref RC_mhttpd_Main_Status_page
( @ref RC_mhttpd_status_Page_buttons "if present").

This page reflects the @ref F_History_logging "History System" settings.

 It lists on the
top of the page the possible group names containing a list of panels defined in
the ODB.
Next a series of buttons defines the time scale of the graph with predefined time
window, <b> "<<","<" "+" "-" ">" ">>" </b> buttons permit the shifting of the
graph in the time direction. Other buttons will allow graph resizing, Elog attachment
creation, configuration of the panel and custom time frame graph display.
By default a single group is created "Default" containing the trigger rate for the
"Trigger" equipment.

The configuration options for a given panel consists in:
- Zooming capability, run markers, logarithmic scale.
- Data query in time.
- Time scale in date format.
- Web based page creation ( <span class="button">New</span>button) for up to 10 history channels per page.

 * <br><br><br>
 * <center>
 *  <span class="image">  History page.
 * <br><br><br> 
 *  \image html history20.jpg
 * </span></center>
 * <br><br><br>  

 * <br><br><br>
 * <center>
 *  <span class="image">  History channel selection Page.
 * <br><br><br>
 *  \image html historyselect.jpg
  * </span></center>
 * <br><br><br>  

<br>
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Program_page",  "RunControl",  "RC_mhttpd_Alarm_page", "RC_mhttpd_History_page", "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
\anchor end
<!-- end of PAGE  RC_mhttpd_History_page -->
*/



<!-- ------------ A L A R M   P A G E  ------- -->

/*! \page   RC_mhttpd_Alarm_page Alarm page
<br>
\anchor idx_mhttpd_page_alarm 
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_History_page", "RunControl","RC_mhttpd_MSCB_page",  "RC_mhttpd_Alarm_page", "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>

By clicking on the  <span class="button">Alarms</span> button (@ref  RC_mhttpd_status_Page_buttons "if present")  on the
@ref  RC_mhttpd_Main_Status_page, the Alarms mhttpd page appears.
This page presents information about the @ref  RC_Alarm_System  from the  @ref RC_ODB_Alarms_Tree . 
By clicking on the hyperlinks on this Alarms page, you can navigate directly to the alarm class and
setup of a particular alarm under the /Alarms tree. In the example below, the name of the alarm that has gone off 
is "fepol" and the alarm class is "Caution". Buttons are provided so that all or individual activated alarms can 
be reset.
 

 * <br><br><br>
 * <center>
 *  <span class="image">  
 * <br><br><br>
 *  \image html pol_alarms_page_fepol.png
 * </span></center>
 * <br><br><br>  

\anchor RC_mhttpd_alarm_banner
When an alarm has goes off, a banner will appear on the MIDAS Main Status page.

This following image shows the Main status page for the TRIUMF Pol experiment running with the alarm system
enabled. The alarm on "fepol" has gone off, resulting in a large coloured banner with an alarm message.   

 * <br><br><br>
 * <center>
 *  <span class="image"> 
 * <br><br><br>
 *  \image html pol_fepol_alarm_status.png
 * </span></center>
 * <br><br><br>  

\anchor RC_odb_alarm_msg
If running @ref RC_odbedit_utility "odbedit", a message appears on the screen as follows: 
@code
[pol@isdaq01 ~]$ odb
Caution: Program fePOL is not running
[local:pol:S]/> 
@endcode

The alarm class in this case is "Caution" and the message is "Program fePOL is not running". These
fields have been set up in the  @ref RC_ODB_Alarms_Tree ODB as described in the @ref RC_Alarm_System .


A separate banner will appear for each alarm that is activated. Here three alarms of three different classes
are activated. The classes have been set up with different colours for each class of alarm:
 * <br><br><br>
 * <center>
 *  <span class="image">  MIDAS Main Status page showing three alarm banners
 * <br><br><br>
 *  \image html three_alarms.png
 * </span></center>
 * <br><br><br>  
 


 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_History_page", "RunControl","RC_mhttpd_MSCB_page",  "RC_mhttpd_Alarm_page", "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
\anchor end
<!-- end of PAGE RC_mhttpd_Alarm_page  -->
*/


<!-- ------------ M S C B   P A G E  ------- -->

/*! @page    RC_mhttpd_MSCB_page MSCB page
<br>
\anchor idx_mhttpd_page_MSCB
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Alarm_page", "RunControl","RC_mhttpd_Config_page",  "RC_mhttpd_MSCB_page", "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly



<span class = "new">The MSCB (MIDAS Slow Control Bus) page is a new page that has been recently implemented in
mhttpd (@ref ndf_dec_2009) </span>.

<br> This allows web access to all devices in an
<a href="http://midas.psi.ch/mscb">MSCB system</a>  and to their variables:

 * <br><br><br>
 * <center>
 *  <span class="image">  An example of an MSCB page
 * <br><br><br>
 *  \image html mhttpd_MSCB.png
 * </span></center>
 * <br><br><br>  
<br>


In order to create the MSCB page, the flag
<br> <b>-DHAVE_MSCB</b>
<br> must be present in the Makefile for mhttpd. This is now the default in the Makefile from SVN, but it can be taken out for experiments
not using MSCB. If the flag is present, mhttpd is linked against <b>midas/mscb/mscb.c</b> and has direct access to all
mscb ethernet submasters (USB access is currently disabled on purpose there).
The presence of the  flag <b>-DHAVE_MSCB</b> will cause the  <span class="button">MSCB</span> button to appear on the main status page by default, unless
the  @ref RC_mhttpd_status_menu_buttons "menu buttons" have been customized, in which case the MSCB key must be listed
in the ODB Key <span class="odb">/Experiment/Menu Buttons"</span><br>e.g.
\code
/Experiment/Menu Buttons = Start, ODB, Messages, ELog, Alarms, Programs, History, MSCB, Config, Help
\endcode


The MSCB page uses the ODB Tree <b>/MSCB/Submasters/...</b> to obtain a list of all available submasters:<br>

\code
[local:MEG:R]/MSCB>ls -r
MSCB
    Submaster
        mscb004
            Pwd                 xxxxx
            Comment             BTS
            Address             1
        mscb034
            Pwd                 xxxxx
            Comment             XEC HV & LED
            Address
                                0
                                1
                                2

\endcode

Each submaster tree contains an optional password needed by that submaster, an optional comment
(which will be displayed on the 'Submaster' list on the web page), and an array of node addresses.<br>
<br>
These trees can be created by hand, but they are also created automatically by mhttpd if the <span class="odb">/MSCB/Submaster</span>
entry is not present in the ODB. In this case, the equipment list is scanned and all MSCB devices and addresses are collected from locations
such as
<br>
<span class="odb">/Equipment/&lt;name&gt;/Settings/Devices/Input/Device</span><br>

or
<br>
<span class="odb">/Equipment/&lt;name&gt;/Settings/Devices/&lt;name&gt;/MSCB Device</span><br>
which are the locations for MSCB submasters used by the <b>mscbdev.c</b> and <b>mscbhvr.c</b> device drivers.
Once the tree is created, it will not be touched again by mhttpd, so devices
can be removed or reordered by hand.<br>
<br>


\anchor end
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Alarm_page", "RunControl","RC_mhttpd_Config_page",  "RC_mhttpd_MSCB_page", "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly

<!--    END of MSCB   Page  -->
*/


<!-- ------------ C O N F I G  P A G E  ------- -->

/*! @page   RC_mhttpd_Config_page Config page

\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_MSCB_page", "RunControl","RC_mhttpd_Alias_page",  "RC_mhttpd_Config_page", "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly

This page is displayed by pressing the <b>Config Button</b>  ( @ref RC_mhttpd_status_Page_buttons "if present")
on the  @ref RC_mhttpd_Main_Status_page . This allows the user to change the refresh period of the Status page.

 * <center> 
 * <span class="image">mhttpd Config page</span>
 * <br>
 *  \image html config.jpg
 * </center> 

\Note
It is important to note that the \b refresh of the Status Page is not "event driven" but is controlled by a 
timer whose rate is adjustable through the  <span class="Config">ODB</span> @ref RC_mhttpd_Config_button "button".
This means the information at any given time may reflect the experiment state of up to
<i> n </i> seconds in the past, where <i> n </i> is the timer setting of the refresh parameter.

\anchor end
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_MSCB_page", "RunControl","RC_mhttpd_Alias_page",  "RC_mhttpd_Config_page", "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly

<!--  end of   RC_mhttpd_Config_page Config page   -->
*/


<!-- ------------ A L I A S   P A G E  ------- -->

/*! @page   RC_mhttpd_Alias_page Alias page
\anchor idx_mhttpd_page_alias
\anchor idx_mhttpd_buttons_alias
<br>
 
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Config_page", "RunControl","RC_mhttpd_Logger_page",  "RC_mhttpd_Alias_page", "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
@section RC_mhttpd_alias_buttons Alias-Buttons (or Hyperlinks)
An Alias page is displayed by clicking on a user-defined <span class="new"> <b> Alias-button </b> (\b alias-hyperlink prior to the
@ref   RC_mhttpd_status_page_redesign "redesign") </span>
on the <span class="utility">mhttpd</span>  @ref  RC_mhpptd_optional_buttons "main status page".

Alias-buttons provide the user with a simple way to access other webpages (remote or local).
They are
often used to provide "shortcuts" from the main Status page
to the documentation for an experiment, or to a particular ODB location. For example, if the experiment requires frequent
reference to a list of parameters under  <span class="odb">/Equipment/TpcGasPlc/Common/</span>, an <b> alias button </b>
can be set up on the main status page to allow the user access to this tree with one click of the mouse.
\Note
Alias and  @ref  RC_mhttpd_Activate "Custom" buttons are displayed on the
@ref   RC_mhttpd_status_page_redesign "same line" on the status page.
<br>

 - @ref  RC_mhttpd_alias_define
 - @ref  RC_odb_alias_tree
 
\anchor mhttpd_alias_image
 * <br><br><br>
 * <center> 
 * <span class="image">Clicking on an alias-button displays the link contents
 *  \image html alias.jpg
 * </span>
 * </center> 
 * <br><br><br>
<br><hr><br>

@section RC_mhttpd_alias_define How to create Alias-Buttons 

Alias-Buttons  <span class="new">(hyperlinks prior to @ref ndf_dec_2009)</span> on the @ref  RC_mhpptd_optional_buttons "main status page"
are defined  through the  @ref RC_odb_alias_tree "ODB Alias tree". 
<br>


\anchor idx_ODB_tree_Alias
@subsection RC_odb_alias_tree The ODB /Alias Tree
\note The   <span class="odb"> /Alias </span>  tree is applicable to @ref RC_mhttpd "mhttpd" only, and ignored by 
@ref RC_odbedit "odbedit".


This optional ODB tree provides the user with a way to access other webpages via \b buttons 
placed on the mhttpd  @ref RC_mhttpd_status_page_redesign "main Status page" (<span class="new">\b hyperlinks prior to @ref ndf_dec_2009).</span>

<br>


The ODB <span class="odb">/Alias</span> key is not present until the user creates it. It is intended to
contain a list of symbolic links to any desired ODB location. Any key created under
<span class="odb">/Alias</span> will appear as a \b Button or
  @ref RC_mhttpd_status_page_redesign "Hyperlink" on the Main Status page, with the same name as the key,
  except where noted below (e.g. alias links spawned in the same frame).
<br>
<br>
By default, the clicking of the alias-button in the web interface will spawn a \b new \b frame.
To force the display of the alias page in the \b same \b frame, an <b>"&"</b> has to be appended to
the name of the alias. The \b & is stripped off the alias name when it appears on the main status page.

The following code demonstrates creating alias-buttons linking to ODB keys using @ref RC_odbedit_utility "odbedit" :
@code 
odbedit
[local:t2kgas:S] mkdir Alias          ***  Create the optional /Alias directory
[local:t2kgas:S] cd Alias
[local:t2kgas:S] ln /Equipment/TpcGasPlc/Common/ "TPC Common"    *** New frame, no &
[local:t2kgas:S] ln /Equipment/TpcGasPlc/Common/ "TPC Common"&"  *** Same frame, with &

@endcode
\Note
The items preceded by \b *** are comments

This would create two identical alias-buttons called "TPC Common". Clicking on the first alias-button <span class="button">TPC Common</span>
would open the page in a \b new frame as shown  @ref mhttpd_alias_image "above"; clicking on the second would
open it in the \b same frame. 
(Two identical buttons have been created for demonstration purposes only. 
Normally all buttons would be created with unique names.)


The following code demonstrates how to make a link to an external webpage:
\code 
[local:t2kgas:S] cd Alias
[local:t2kgas:S]create string triumf
String length [32]:
[local:t2kgas:S] set triumf "http://triumf.ca"
\endcode
Clicking on the alias-button <span class="button">triumf</span> will show the contents of the link in a new page (see   @ref mhttpd_alias_image "above").

<br>
\anchor end
<br>
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Config_page", "RunControl","RC_mhttpd_Logger_page",  "RC_mhttpd_Alias_page", "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly

<br>
*/


<!-- ------------ L O G G E R   P A G E  ------- -->

/*! @page   RC_mhttpd_Logger_page Logger page
\anchor idx_mhttpd_page_logger
<br>
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Alias_page", "RunControl","RC_mhttpd_Sequencer_page",  "RC_mhttpd_Logger_page", "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly



@section RC_mhttpd_Logger_mlogger  mlogger settings information
Provided the MIDAS logger  @ref  F_mlogger_utility "mlogger" is running, the mhttpd main status page
shows logger information and statistics. 
<br>


<span class="utility">mlogger</span> channel  information is displayed by clicking on a mlogger channel hyperlink
on the <span class="utility">mhttpd</span>  main status page (see  @ref RC_mhttpd_Logger_image "below").
The subtree <span class="odb">/Logger/Channels/<channel-number>/Settings</span>
is shown.  See @ref F_Logging "mlogger" for more information.
In the example below, only one mlogger channel is defined (channel 0). If multiple logging channels are active, additional
hyperlinks will be present on the main status page.
<br>
\anchor RC_mhttpd_Logger_image
 * <center> 
 * <span class="image">mlogger channel information on mhttpd main status page</span>
 * <br><br><br>
 * \image html loggerstatuspage.jpg
 * </center> 
 * <br>

<br><hr><br>


@section RC_mhttpd_Logger_lazylogger  lazylogger settings information
Provided the MIDAS lazylogger  @ref  F_lazylogger_utility "lazylogger" is running,
the mhttpd  @ref RC_mhttpd_Logger_image "main status page"
shows lazylogger information and statistics. 
<br>


<span class="utility">Lazylogger</span> settings information is displayed by clicking on a lazylogger Label hyperlink
on the <span class="utility">mhttpd</span>  main status page  (see  @ref RC_mhttpd_Logger_image "above").
The subtree <span class="odb">/Lazy/\<label\>/Settings</span>
is shown.  See @ref F_lazylogger_utility "lazylogger" for more information.


\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Alias_page", "RunControl","RC_mhttpd_Sequencer_page",  "RC_mhttpd_Logger_page", "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
\anchor end

*/



<!-- ------------ S E Q U E N C E R   P A G E  ------- -->

/*! @page   RC_mhttpd_Sequencer_page Sequencer page
\anchor idx_mhttpd_page_sequencer
<br>
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Logger_page", "RunControl","RC_mhttpd_Custom_page",  "RC_mhttpd_Sequencer_page", "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly


<br>
<span class="new">Support for the Sequencer was added in @ref ndf_jun_2011  ) </span>.
\anchor idx_mhttpd_buttons_sequencer

The @ref RC_Sequencer page is displayed by clicking on the  <span class="button">Sequencer</span> Button on the  @ref RC_mhttpd_Main_Status_page
(  @ref RC_mhttpd_status_Page_buttons "if present").  The @ref RC_Sequencer takes its parameters from the  @ref RC_Seq_odb "ODB /Sequencer tree".

The first time the  <span class="button">Sequencer</span> Button is pressed, the Sequencer Page will likely appear as follows, 
where it has been unable to find the specified sequencer loadfile: 

 * <center> 
 * <span class="image">Example of MIDAS Sequencer page</span>
 * <br><br><br>
 * \image html seqscript9.png
 * </center> 

@section RC_Seq_getting_started Create and load a sequencer file
<ol>
<li> Create a simple sequencer file.  Either use the @ref RC_Seq_Example_1 "example file" <i>xmltest.xml</i> as a template
or if preferred create a file in  @ref  RC_Sequencer " Midas Script Language (MSL)".

This file should be created in (or copied to) the
  directory on disk that you will be using. The sequencer file contains @ref  RC_Sequencer "sequencer statements".
 Edit the file using your usual editor, substituting ODB paths that exist on your system.
  Alternatively, you may edit it using the  <span class="button">Edit Script</span> button once the file is loaded.

<li> Enter the appropriate  <span class="odb">path</span> and  <span class="odb">filename</span> for your system in the  @ref RC_Seq_odb "ODB /Sequencer" tree 
<li> Click on the  <span class="button">Sequencer</span> Button on the  @ref RC_mhttpd_Main_Status_page 
<li> If you have correctly entered the  <span class="odb">path</span> and  <span class="odb">filename</span> (see step 2 above) your file should 
be loaded as in the next example.
</ol>

 * <center> 
 * <span class="image">Example of MIDAS Sequencer page showing a loaded sequencer file</span>
 * <br><br><br>
 * \image html seq_orig_file.png
 * </center> 

@section RC_Seq_edit  Edit the sequencer file
Click the  <span class="button">Edit</span> button to edit the loaded file.  Save the edited file with the  <span class="button">Save</span> button
or the edits will be lost.


@section RC_Seq_load  Load another sequencer file
Click the  <span class="button">Load</span> button to load a different sequencer file. 
A list of the available sequencer files will be shown as follows:
 * <center> 
 * <span class="image">Example of MIDAS Sequencer page after clicking the Load button</span>
 * <br><br><br>
 * \image html seqload.png
 * </center> 

After clicking on "xmltest.xml", the loaded file will be displayed, e.g.

 * <center> 
 * <span class="image">Example of MIDAS Sequencer page after clicking the Load button</span>
 * <br><br><br>
 * \image html seqfile.png
 * </center> 


@section RC_Seq_start  Start the sequencer
Start the sequencer using the  <span class="button">Start Script</span> button.  If  @ref RC_Edit_On_Sequence_subdir "edit-on-sequence parameters" 
are defined, these will be displayed for the user to review and/or edit.


 * <center> 
 * <span class="image">Example of Start Sequencer page showing edit-on-sequence parameters</span>
 * <br><br><br>
 * \image html seq_start_params.png
 * </center>


Start the script with the  <span class="button">Start Script</span> button. 

<b>If there is an error in the script</b>, the display will change to indicate where the error has occurred, e.g.

 * <center> 
 * <span class="image">Example of Sequencer page showing an error in the sequencer load file</span>
 * <br><br><br>
 * \image html seq_error.png
 * </center>

These errors are reflected in the <span class="odb">/Sequencer</span> tree as shown @ref RC_seq_err "here".

When there is an error in the loadfile, use the  <span class="button">Edit</span> button to correct the file.


<b>If there is no error</b> detected,  the display will then change to show the sequencer script status page
(see examples below). The colours change to indicate the progress of the sequencer.


 * <center> 
 * <span class="image">Example of Sequencer Status page showing a running sequence</span>
 * <br><br><br>
 * \image html seq_progress.png
 * </center>

When the sequencer is running, the buttons <span class="button">Stop after current run</span> and 
 <span class="button">Stop immediately</span> appear. These buttons are self-explanatory. 
There is also a  <span class="button">Status</span> button provided to return to the main Status page.


The main status page also shows whether the sequencer is running, as indicated in the example below ( see also @ref seq_status "Restart box").

In this example, the user has also programmed the  @ref RC_Status_Items_subdir "status items" to reflect the progress of the Sequencer. 
The Sequencer code in the load file changes the values of the ODB keys <span class="odb">pulse width (ms)</span> and <span class="odb">seq counter</span>. 
These have been defined as "status items" and also appeared as edit-on-sequence parameters @ref RC_Seq_start "above". 

 * <center> 
 * <span class="image">Example of Main Status Page showing when the sequencer is running
 * <br><br><br>
 * \image html main_status_seq.jpg
 * </center>






\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Logger_page", "RunControl","RC_mhttpd_Custom_page",  "RC_mhttpd_Sequencer_page", "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
\anchor end
*/