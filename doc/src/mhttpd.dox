
/*! @page RC_mhttpd mhttpd -  Run Control using the Midas Web Server
\anchor idx_midas_webserver
\anchor idx_mhttpd-task
<!--  mhttpd functionality is a sub-page of the Run Control section; 
      mhttpd Usage is in the Utility section RC_mhttpd_task
 -->
<br>
\htmlonly 
<script type="text/javascript">
pages( "RC_odbedit_examples",  "RunControl", "RC_mhttpd_Main_Status_page", "RC_mhttpd",  "end" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly 

<br>
@section RC_mhttpd_task mhttpd - Run control & Monitoring through the web

The Midas Web Server utility \b "mhttpd" provides Midas DAQ control through
the web using any web browser. Provided the @ref RC_mhttpd_Usage "daemon application" is running,
the user may access any Midas experiment running on a given host from a Web browser.

Full monitoring and almost full control of a particular experiment can be achieved
through the Midas Web server.

@anchor RC_mhttpd_Usage Usage :
<br>
\b mhttpd requires as argument the TCP/IP port number in order to listen to
the web based request.

- <b> Arguments </b>
  - [-h ] : help
  - [-p port ] : port number, no default, should be 8081 for <b> Example </b>.
  - [-D ] : start program as a \b daemon

- <b> Usage </b>
 @code
  >mhttpd -p 8081 -D
 @endcode

\note
Several copies of mhttpd can run on a single host, as long as they are started on different ports. 
If more than one experiment runs on the same host, a server for each experiment must be
started on a different port.

\anchor idx_mhttpd_proxy-access
@subsection RC_mhttpd_proxy Proxy Access to mhttpd

A major change was made to mhttpd in Feb 2008, changing all internal URLs to relative paths.
This allows proxy access to mhttpd via an apache server for example, which might
be needed to securely access an experiment from outside the lab through a
firewall. The following settings can be placed into the Apache configuration,
assuming the experiment runs on machine "online1.your.domain", and apache on a
publically available machine "www.your.domain":
<br>
Redirect permanent /online1 <a href="http://www.your.domain/online1">http://www.your.domain/online1</a>
ProxyPass /online1/ <a href="http://online1.your.domain/">http://online1.your.domain/</a>

&lt;Location "/online1"&gt;
  AuthType Basic
  AuthName ...
  AuthUserFile ...
  Require user ...
&lt;/Location&gt;

If  the URL <a href="http://www.your.domain/online1">http://www.your.domain/online1</a> is accessed, it will be redirected
(after optional authentication) to <a href="http://online1.your.domain/">http://online1.your.domain</a>. If you click on
the mhttpd history page for example, mhttpd would normally redirect this to 

<a href="http://online1.your.domain/HS/">http://online1.your.domain/HS/</a>

but this is not correct since you want to go through the proxy www.your.domain.
The new relative redirection inside mhttpd now redirects the history page
correctly to

<a href="http://www.your.domain/onlin1/HS/">http://www.your.domain/onlin1/HS/</a>



<br>
<hr>
<br>
\anchor idx_mhttpd-task_connect
@subsection RC_mhttpd_connect Connect to the mhttpd webserver
To connect to a mhttpd webserver running on 
port &lt;nnnn&gt; on host &lt;hostname&gt; and experiment &lt;exptname&gt;, 
enter the URL in your web browser in the form

@code
 http://<hostname>:<nnnn>/?exp=<exptname>
@endcode
e.g.
@code
 http://midtis09:8081/?exp=midas
@endcode
<br>

The @ref RC_mhttpd_Main_Status_page should then be visible in the web browser window. If the daemon has NOT
been started on the correct port, an error page will be visible instead.

<br>
<hr>
<br>

@section RC_mhttpd_functionality Features of mhttpd

The basic functionality of mhttpd is:
- Run control (start/stop).
- Frontend up-to-date status and statistics display.
- Logger up-to-date status and statistics display.
- Lazylogger up-to-date status and statistics display.
- Current connected client listing.
- Slow control data display.
- Basic access to ODB.
- Graphical history data display.
- Electronic LogBook recording/retrieval messages
- Alarm monitoring/control


These functions are available on one or more of the various \b pages described below :

- \subpage RC_mhttpd_Main_Status_page - Main status page
- \subpage RC_mhttpd_Start_page - Run control page
- \subpage RC_mhttpd_ODB_page - Online Database manipulation (equivalent to ODBedit)
- \subpage RC_mhttpd_Equipment_page (Frontend info)
- \subpage RC_mhttpd_CNAF_page (CAMAC access page)
- \subpage RC_mhttpd_Message_page (Message Log) 
- \subpage RC_mhttpd_Elog_page (Electronic Log)
- \subpage RC_mhttpd_Program_page (Program control)
- \subpage RC_mhttpd_History_page (History display)
- \subpage RC_mhttpd_Alarm_page (Alarm control)
- \subpage RC_mhttpd_MSCB_page (Slow Control)
- \subpage RC_mhttpd_Alias_page (User defined Alias page(s) )
- \subpage RC_mhttpd_Custom_page (User defined Web page(s) )

Several directory trees in the ODB are specific to mhttpd, or have additional features if mhttpd
is running. They are described below in the appropriate section.
-  @ref RC_odb_alias_tree
-  @ref RC_odb_custom_tree
-  @ref RC_odb_script_tree 
-  @ref F_ODB_Elog_Tree
-  @ref RC_Edit_On_Start 



\htmlonly 
<script type="text/javascript">
pages( "RC_odbedit_examples",  "RunControl", "RC_mhttpd_Main_Status_page", "RC_mhttpd",  "" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly 

<br>
\anchor end
<!-- End of page RC_mhttpd -->
*/

<!-- ------------ M A I N  S T A T U S  P A G E  ------- -->

/*! \page RC_mhttpd_Main_Status_page Main Status Page 
\anchor idx_mhttpd_page_status

<br>
 
\htmlonly
<script type="text/javascript">
pages( "RC_mhttpd",  "RunControl","RC_mhttpd_Start_page", "RC_mhttpd_Main_Status_page",  "end" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
@section RC_mhttpd_msp_default Status Page (minimal) 

Once the @ref RC_mhttpd_connect "connection" to a given experiment is established, the <b>Main Status
Page</b> of the Midas webserver is displayed with the current ODB information related to this experiment.

With a \b minimal odb and experiment name "midas" the mhttpd <b> Status Page </b> might look like this:
@anchor RC_mhttpd_minimal_status_page

 * <br><br><br>
 * <center> 
 * <span class="image">Main Status Page with minimal ODB
 * <br><br><br>
 *  \image html status_nothing.png
 * </span>
 * </center> 
 * <br><br><br>

In this case, there is only one client running (mhttpd), no  @ref FE_sw_equipment "equipments" have been defined, 
and only the standard  buttons are shown.
<br>

@section RC_mhttpd_msp_customized Status Page for a running experiment

@anchor RC_mhttpd_pol_status
Once the user has customized their experiment, by 
 - starting some of the Midas tasks (e.g. the Midas logger @ref F_mlogger_task "mlogger" and the 
@ref F_lazylogger_task "lazylogger" )
 - creating and starting some frontend(s), which define various equipment(s)
 - defining user and alias-links (buttons)

the main <b> Status Page </b> will show more information. The following image shows the Status Page
of the "pol" experiment at TRIUMF:

@anchor RC_mhttpd_pol_status_example
 * <br><br><br>
 * <center> 
 * <span class="image">Midas Status Page for experiment "pol"
 * <br><br><br>
 *  \image html pol_running.gif
 * </span></center> 
 * <br><br><br>


@section RC_mhttpd_status_page_redesign Redesign of Main Status Page
\anchor alias_buttons_status_page
<span class="new">
The appearance of the Main Status Page has been changed  (@ref ndf_dec_2009) 
<ul class="new">
 <li> the \b "Analyzed" column has been dropped ( \ref RC_analyzer_column "see below")
 <li> \b alias-hyperlinks and links to Custom pages on the main Status Page have been changed from \b hyperlinks to \b Buttons  (@ref RC_mhttpd_alias_buttons),
 <li>  there are now four different background colors (@ref ndf_jan_2010) for the four rows of buttons, i.e. :
    <ul class="new">
        <li> Main menu buttons,
        <li> Scripts,
        <li> Manually triggered events,
        <li> Alias & Custom pages.
     </ul>
</ul>
     
\anchor RC_analyzer_column        
Since the column on the main midas status page with fraction of analyzed events was
barely used, it has been dropped. It did not make sense for all slow 
control events. In case this feature is required in some experiment, it will be moved  
into a custom page and the ratio calculated in JavaScript, where there is much more 
flexibility.

This modification frees up more space on the status page for the "Status" column, where 
front-end programs can report errors etc.
        
The new format is illustrated below:

 * <br><br><br>
 * <center>
 * <span class="image">Status page showing four rows of buttons
 * <br><br><br>
 *  \image html new_status_page.png
 * </span></center> 
 * <br><br><br>

Note also that the column "Analyzed" has also been removed.</span>
 
<hr>

<!-- ==========  S T A T U S    P A G E  : -     F E A T U R E S  =============== -->
@section RC_mhttpd_status_page_features Features of the Main Status Page

The Status Page is sub-divided in several sections:
 - @ref RC_mhttpd_status_title
 - @ref RC_mhttpd_status_menu_buttons 
        - @ref RC_mhttpd_status_RC_buttons
        - @ref RC_mhttpd_status_Page_buttons
 - @ref RC_mhttpd_status_User_buttons
 - @ref RC_mhttpd_status_Alias_links
 - @ref RC_mhttpd_status_Run_info
 - @ref RC_mhttpd_status_Equipment_info
 - @ref RC_mhttpd_status_Logger
 - @ref RC_mhttpd_status_Lazylogger
 - @ref RC_mhttpd_status_latest_msg
 - @ref RC_mhttpd_status_clients

The following explanation refers to the status page example
@ref RC_mhttpd_pol_status_example "shown above".


<hr>


@subsection RC_mhttpd_status_title Experiment/Date information 
The top line on the @ref RC_mhttpd_pol_status_example "main status page" shows the Experiment name and the current date.


<hr>
\anchor idx_mhttpd_buttons_menu
@subsection  RC_mhttpd_status_menu_buttons Menu buttons

The top row of buttons on the @ref RC_mhttpd_pol_status_example "main status page" are the  @ref RC_mhttpd_status_RC_buttons
 and the nine  @ref RC_mhttpd_status_Page_buttons . These buttons are present by default, 
<span class="new">but can now (since @ref ndf_dec_2009) be customized
(see   @ref RC_customize_experiment_tree).
It is also possible (since @ref ndf_nov_2009) to optionally hide the   
@ref RC_mhttpd_status_RC_buttons  (see @ref RC_customize_experiment_tree). </span>

<br><hr><br>
\anchor idx_mhttpd_buttons_run-control
@subsection RC_mhttpd_status_RC_buttons Run Control buttons

<span class="new">Since  @ref ndf_nov_2009 , if the Run Buttons are present (see @ref customize_mhttpd_run_buttons "customize run buttons") 
</span>,
depending on the @ref RC_Run_States_and_Transitions  "run state", a single or the two first buttons  on the @ref RC_mhttpd_pol_status_example "main status page"
will show the possible action that can be taken, i.e.

\anchor RC_table_run_state
<table style="text-align: center; width: 40%;" border="1" cellpadding="2"
cellspacing="2">
<caption>Run Control buttons visible depending on Run State
</caption>
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 255); text-align: center;"><span
style="font-weight: bold;">Run State</span><br>
</td>
<td
style="vertical-align: top; background-color: rgb(204, 204, 255); text-align: center;"><span
style="font-weight: bold;">Run Control Buttons present</span><br>
</td>
<td
style="vertical-align: top;  background-color: rgb(204, 204, 255); text-align: center;"><span
style="font-weight: bold;">Action</span><br>
</td>
</tr>
<tr>
<td style="vertical-align: top; background-color: rgb(255, 0, 0);">STOPPED<br>
</td>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">Start</span><br>
</td>
</tr>
</table>
</td>
<td
style="vertical-align: top; background-color: rgb(255, 255, 255);">Start
the run<br>
</td>
</tr>
<tr>
<td colspan="1" rowspan="2"
style="vertical-align: top; background-color: rgb(51, 255, 51);">RUNNING<br>
</td>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">Stop</span><br>
</td>
</tr>
</table>
</td>
<td
style="vertical-align: top; background-color: rgb(255, 255, 255);">Stop
the run<br>
</td>
</tr>
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">Pause</span><br>
</td>
</tr>
</table>
</td>
<td
style="vertical-align: top; background-color: rgb(255, 255, 255);">Pause
the run<br>
</td>
</tr>
<tr>
<td colspan="1" rowspan="1"
style="vertical-align: top; background-color: rgb(255, 255, 0);">PAUSED<br>
</td>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">Resume</span><br>
</td>
</tr>
</table>
</td>
<td
style="vertical-align: top; background-color: rgb(255, 255, 255);">Resume
the run<br>
</td>
</tr>
</table>

<br><hr><br>

\anchor idx_mhttpd_buttons_page-switch
\anchor idx_edit_ODB_mhttpd
@subsection RC_mhttpd_status_Page_buttons Page switch buttons

The Page switch buttons on the @ref RC_mhttpd_pol_status_example "main status page"  change the page to one of the sub-pages. The sub-pages
all provide a button labelled \b Status, which returns to the main Status page when clicked.

<span class="new">Note that the Page switch buttons can now be @ref RC_mhttpd_status_menu_buttons "customized", so not all the possible
Page switch buttons may be visible on a particular status page.</span>


<table style="text-align: left; width: 100%;" border="1" cellpadding="2"
cellspacing="2">
<caption>Page Switch Buttons on the Main Status Page</caption>
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(204, 204, 255); ">Page Switch Button</td>
<td  style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(204, 204, 255); ">Explanation</td>

<! -- Line 1  ODB  -->
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">ODB</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
This button provides (limited) access to the Online Data Base.  
Depending on the security, read/write access to any ODB field can be gained (see @ref RC_mhttpd_ODB_page).
For more sophisticated editing, use @ref RC_odbedit_task "odbedit".
</td></tr>


<!-- Line 2 -->
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204); text-align: center;"><span
style="font-weight: bold;">MSCB</span><br>
</td>
</tr>
</table>
</td>
<td style="vertical-align: top;"><span class="new">
The @ref RC_mhttpd_MSCB_page gives access to devices in a Midas Slow Control Bus system.
(Implemented @ref ndf_dec_2009)</span>

</td>
</tr>
<!-- Line 3 -->
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">CNAF</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
\b Note: <span  class="new">in versions since  @ref ndf_dec_2009 <b>this button has been removed</b> and replaced by the MSCB button</span>.
<br>If one of the equipments is a CAMAC frontend, it is possible to
issue CAMAC commands through this button. In this case the frontend is acting as a
RPC CAMAC server for the request.  See @ref RC_mhttpd_CNAF_page
</td></tr>
<tr>

<!-- Line 4 -->
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">Messages</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
Clicking this button opens the @ref RC_mhttpd_Message_page "message page" and shows the n last entries
of the   @ref F_Messaging  "Midas system message log".
The last entry is always present in the status page (see  @ref RC_mhttpd_status_latest_msg ).
</td></tr>
<tr>
<!-- Line 5 -->
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">ELog</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
This button gives access to the Electronic Log book (Elog). The Elog allows
the permanent recording (i.e. in a file) of comments, messages, screen captures etc. composed 
by the users (see @ref RC_mhttpd_Elog_page).
</td></tr>
<tr>
<!-- Line 6 -->
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">Alarms</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
Clicking this button displays the Alarm page, which shows the current Alarm setting 
for the entire experiment. The activation of an alarm is done through the ODB under the \b /Alarms
tree (See @ref RC_Alarm_System)
</td></tr>
<tr>

<!-- Line 7 -->
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">Programs</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
This button gives access to the Programs page, which displays the status of
the current programs (i.e. midas applications/clients) which are or have been running
for this experiment. Each program  has a specific information record associated with it in the ODB.
This record is tagged as a hyperlink in the listing (see @ref RC_mhttpd_Program_page).
</td></tr>

<!-- Line 8 -->
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">History</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
Display History graphs of pre-defined variables.
   The history setting has to be done through ODB under the \b /History
   (see @ref F_History_logging , @ref RC_mhttpd_History_page).
</td></tr>


<!-- Line 9 -->
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">\anchor  RC_mhttpd_Config_button Config</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
 Allows the <b> page refresh rate </b> to be changed.
@anchor RC_mhttpd_refresh
<span class="note">
It is important to note the \b refresh of the Status Page is not "event driven" but is controlled by a 
timer (see @ref RC_mhttpd_Config_button "Config button" ).
This means the information at any given time may reflect the experiment state of up to
n seconds in the past, where n is the timer setting of the refresh parameter. </span>
</td></tr>

<!-- Line 10 -->
<tr>
<td style="vertical-align: top; font-weight: bold; text-align: center; background-color: rgb(153, 153, 153);">
<table
style="text-align: left; width: 20%; margin-left: auto; margin-right: auto;"
border="1" cellpadding="2" cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 204) ; text-align: center; "><span
style="font-weight: bold;">Help</span><br>
</td>
</tr>
</table>
</td>
<td  style="vertical-align: top;">
Help and link to the main Midas web documentation (i.e. this document).
</td></tr>

</table>


<br><hr><br>
\anchor idx_mhttpd_buttons_user
@subsection RC_mhttpd_status_User_buttons Optional User buttons
User buttons that appear on the @ref RC_mhttpd_pol_status_example "main status page"  may be defined through @ref RC_odb_script_tree .
<br>

\anchor idx_ODB_tree_Script
@subsubsection RC_odb_script_tree The ODB /Script tree
\note 
The  <span class="odb">/Script</span> tree is applicable to @ref RC_mhttpd "mhttpd", and ignored by 
@ref RC_odbedit "odbedit".



The optional ODB tree  <span class="odb">/Script</span> provides the user with a way to execute a script when a button is clicked.  
<br>
If the user defines a new tree in ODB named  <span class="odb">/Script</span> , then any key created in this tree will appear as a 
user-button of that name on the default mhttpd main status page. Each sub-tree
    ( <span class="odb">/Script/\<button name>/</span>) should contain at least one string key which is the
    script command to be executed. Further keys will be passed as
   <b> arguments </b> to the script. Midas symbolic links are permitted.

<hr>

@subsubsection RC_odb_script_example Example of creating a User-button
The <b> example </b> below shows the ODB  <span class="odb">/script/dac</span> subdirectory.
   The user-button \b "dac" associated with this subdirectory is shown on the 
@ref RC_mhttpd_pol_status "example status page".

   The first key in the  <span class="odb">dac</span> subdirectory is the string key <span class="odb">cmd</span> which contains the name and path of
the script to be executed (in this case, a perl script). This script is located on the local host computer 
on which the experiment is running. The subsequent keys are parameters input to the script.
@code
[local:pol:R]/>ls "/script/dac"
cmd                             /home/pol/online/perl/change_mode.pl
include path                    /home/pol/online/perl
experiment name -> /experiment/name
                                pol
select mode                     1h

mode file tag                   none
[local:pol:R]/>  
@endcode
When the user-button labelled \b "dac" is pressed, the script \b "change_mode.pl"
 will be executed with the following key contents as parameters, equivalent to the
command:
@code
  "/home/pol/online/perl/change_mode.pl  /home/pol/online/perl pol 1h mode"
@endcode
<br>
This is part of the code of the script \b "change_mode.pl" :
@code
# input parameters :

our ($inc_dir, $expt, $select_mode, $mode_name ) = @ARGV;
our $len = $#ARGV; # array length
our $name = "change_mode" ; # same as filename
our $outfile = "change_mode.txt"; # path will be added by file open function
our $parameter_msg = "include path , experiment , select_new_mode  mode_name";
our $nparam = 4;  # no. of input parameters
our $beamline = $expt; # beamline is not supplied. Same as $expt for bnm/qr, pol
############################################################################
# local variables:
my ($transition, $run_state, $path, $key, $status);

# Inc_dir needed because when script is invoked by browser it can't find the
# code for require

unless ($inc_dir) { die "$name: No include directory path has been supplied\n";}
$inc_dir =~ s/\/$//;  # remove any trailing slash
require "$inc_dir/odb_access.pl";
require "$inc_dir/do_link.pl";

# init_check.pl checks:
#   one copy of this script running
#   no. of input parameters is correct
#   opens output file:
#
require "$inc_dir/init_check.pl";

# Output will be sent to file $outfile
# because this is for use with the browser and STDOUT and STDERR get set to null


print FOUT  "$name starting with parameters:  \n";
print FOUT  "Experiment = $expt, select new mode = $select_mode;  load file mode_name=$mode_name \n";

unless ($select_mode)
{
    print FOUT "FAILURE: selected mode  not supplied\n";
        odb_cmd ( "msg","$MERROR","","$name", "FAILURE:  selected mode not supplied " ) ;
        unless ($status) { print FOUT "$name: Failure return after msg \n"; }
        die  "FAILURE:  selected mode  not supplied \n";

}
unless ($select_mode =~/^[12]/)
{
    print_3 ($name,"FAILURE: invalid selected mode ($select_mode)",$MERROR,1);
}

etc.

@endcode


<hr>

@subsection RC_mhttpd_status_Alias_links Alias-Buttons (buttons or hyperlinks)

User-defined \b Alias-links <span class="new"> or more recently, ( @ref ndf_dec_2009 ) @ref RC_mhttpd_alias_buttons "Alias-buttons")</span> 
give access to Alias pages (see  @ref RC_mhttpd_Alias_page for details).

<br><hr><br>
  
@subsection RC_mhttpd_status_Run_info Run status information
This first line of run status information on the @ref RC_mhttpd_pol_status_example "main status page"  shows 
 - the current run number
 - the @ref RC_table_run_state "run state"
 - the Alarm and Auto Restart status:
<table style="text-align: left; width: 30%;" border="1" cellpadding="2"
cellspacing="2">
<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">Alarms
status<br>
</td>
<td
style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">Restart
status<br>
</td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(51, 255, 51); font-weight: bold; text-align: center; ">Alarms:on </td>
<td
style="vertical-align: top; background-color: rgb(51, 255, 51); font-weight: bold; text-align: center; ">Restart:
yes</td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(255, 204, 204); font-weight: bold; text-align: center; ">Alarms:
off</td>
<td
style="vertical-align: top; background-color: rgb(255, 204, 204); font-weight: bold; text-align: center; ">Restart:no</td>
</tr>
</table>

 - the @ref F_mlogger_task "midas logger" status. 
<table style="text-align: left; width: 50%;" border="1" cellpadding="2"
cellspacing="2">

<tr>
<td
style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">mlogger<br>
</td>
<td
style="vertical-align: top; background-color: rgb(204, 204, 255); font-weight: bold; text-align: center;">message<br>
</td>
</tr>
<tr>
<td style="vertical-align: top;">enabled<br>
</td>
<td style="vertical-align: top; text-align: center; ">
<span style="font-weight: bold;">Data dir:/data1/pol/data/current</span></td>
</tr>
<tr>
<td style="vertical-align: top;">disabled<br>
</td>
<td
style="vertical-align: top; background-color: rgb(255, 255, 0); text-align: center; ">
<span style="font-weight: bold;">Logging disabled</span></td>
</tr>
<tr>
<td style="vertical-align: top;">not running<br>
</td>
<td
style="vertical-align: top; background-color: rgb(255, 0, 0); text-align: center; ">
<span style="font-weight: bold;">Logger not running</span>
</td>
</tr>
</table>


<hr>
\anchor idx_mhttpd_page_status_equipment
@subsection RC_mhttpd_status_Equipment_info Equipment information and Event rates
This first two columns of this section on the @ref RC_mhttpd_pol_status_example "main status page"  shows any defined Equipments (see @ref RC_mhttpd_Equipment_page) 
and the host on which the frontend containing that equipment is running.
In the @ref RC_mhttpd_pol_status_example "example" ,  the first 5 equipments and the last equipment in the list are all 
defined in the frontend called "fePOL" which is running on the host called vwisac2.  
The 6th and 7th equipments in the list (named "DVM" and "Wavemeter" are
defined in a frontend called "feDVM" running on the host called "midtis07". The 8th equipment "DVMT" is
not running.
These are listed in the order in which they are listed in the odb, i.e.
@code
[pol@isdaq01 ~]$ odb
[local:pol:S]/>ls /Equipment/
FIFO_acq
Cycle_Scalers
Histo
Hdiagnosis
Info ODB
DVM
Wavemeter
DVMT
Monitor
@endcode

The background colour of the equipment depends on the status of the associated frontend:
<table style="text-align: center; width: 40%;" border="1" cellpadding="2"
cellspacing="2">
<caption>Colour coding of Equipment status
</caption>
<tr>
<td style="vertical-align: top; background-color: lime; text-align: left;">
Frontend is RUNNING and equipment is ENABLED
</td>
<tr>
<td style="vertical-align: top; background-color: red; text-align: left;">
Frontend is MISSING
</td>
</tr>
<tr>
<td style="vertical-align: top; background-color: yellow; text-align: left;">
Frontend is RUNNING but equipment is DISABLED
</td></tr></table>
<br>
<br>


<hr>


@subsubsection RC_mhttpd_eq_variables Monitor the Equipment variables
The equipment names are linked to their respective \b /Variables sub-tree.
Clicking on any of the equipment links will show an @ref RC_mhttpd_Equipment_page ,
allowing a shortcut for the user to access the current values of the equipment.

<br><hr><br>
\anchor idx_mhttpd_page_status_event-rate
@subsection RC_mhttpd_status_Event_Rates Event Rates
The event statistics for the current run are also shown on the @ref RC_mhttpd_pol_status_example "main status page" , and the percentage of events analyzed by the
  "analyzer" (The numbers are valid only if the name of the analyzer is "Analyzer").


<br><hr><br>


@subsection RC_mhttpd_status_Logger Midas Logger Information
This information is present on the @ref RC_mhttpd_pol_status_example "main status page"  \b only if the @ref F_mlogger_task "Midas Logger" is running. Compare the examples for a
 @ref RC_mhttpd_pol_status_example "running experiment" with a @ref RC_mhttpd_minimal_status_page
"minimal" status page. 
<br>
The Logger list is shown. Multiple logger channels can be active, in which case the hyperlink 1... will
be present in addition to "0".
  The hyperlink "0" will bring you to the odb tree /Logger/channels/0/Settings.
The name of the saved data file is also shown.

<br><hr><br>

@subsection RC_mhttpd_status_Lazylogger Optional Lazylogger Information
This line on the @ref RC_mhttpd_pol_status_example "main status page"  shows the  Lazylogger list. Multiple lazy application can be active.
This information is present only if the  @ref F_lazylogger_task is running.

<br><hr><br>
\anchor idx_message_last
@subsection RC_mhttpd_status_latest_msg Last system message
The last system message to be received at the time of the last display refresh is displayed  on the @ref RC_mhttpd_pol_status_example "main status page" 
(see  @ref F_Messaging). More messages can be viewed
by pressing the   @ref RC_mhttpd_status_Page_buttons "Message button". This opens the  
@ref RC_mhttpd_Message_page "Message page".


<br><hr><br>

\anchor idx_clients_active_mhttpd
@subsection RC_mhttpd_status_clients Active Client list
At the bottom  of the @ref RC_mhttpd_pol_status_example "main status page" is a list of the Midas clients for this experiment that are currently active. The hostname is also shown. This information is derived from the
@ref  RC_odb_system_tree "ODB /System" tree .


<br><br>
 
\htmlonly
<script type="text/javascript">
pages( "RC_mhttpd",  "RunControl","RC_mhttpd_Start_page", "RC_mhttpd_Main_Status_page",  "" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
\anchor end
<!-- end of page RC_mhttpd_Main_Status_page -->
*/


<!-- ------------ S T A R T  P A G E  ------- -->

/*! \page RC_mhttpd_Start_page Start page
\anchor idx_mhttpd_page_start
<br>
 
\htmlonly
<script type="text/javascript">
pages( "RC_mhttpd_Main_Status_page",  "RunControl","RC_mhttpd_ODB_page", "RC_mhttpd_Start_page",   "end" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 
<br>

To start a run, the \b Start button (@ref RC_mhttpd_status_menu_buttons "if present") is pressed, and the user will be prompted for 
any defined experiment-specific parameters (i.e. @ref RC_Edit_On_Start "Edit on start" parameters)  before starting the run. The minimum set of parameters is
the <b> run number </b>, it will be incremented by one relative to the last value from
the status page.  The user may edit the run number  except @ref RC_Prevent_Edit_RN "where noted" before 
continuing.

 * <br><br><br>
 * <center> 
 * <span class="image"> Start run request page. In this case the user defined no run parameters.</span>
 * <br><br><br>
 *  \image html eos_rn.png
 * </center> 
 * <br><br><br>

Once the \b Start \b button is pressed on the Start request page, the system will attempt to start the
run. 

<span class="new">
Since  @ref ndf_jun_2009 , the
mhttpd function for starting and stopping runs now spawns an external helper program to handle the 
transition sequencing.  This helps with the old 
problem of looking at a blank screen for a long time if some frontends take a long time to process run 
transitions. mhttpd now returns immediately with a message <b>Run start/stop requested</b>  until it detects 
that the helper program is started and sets a message <b>runinfo/transition in progress</b> 
(until/unless the run state has changed).  Some aspects of this feature are present since rev 4473.
</span>

<br><hr><br>

@section RC_mhttpd_Edit_On_Start Run Start with defined /Experiment/Edit on Start tree 

If the user has defined  @ref RC_Edit_On_Start "Edit on Start parameters", when a run is started 
<span class="note">all the parameters in the 
ODB tree <b> /Experiment/Edit on Start </b> will be displayed  </span> for possible modification.
 - Pressing the \b Ok button will proceed to start of the run. 
 - Pressing the \b Cancel button will abort the start procedure, and return to the status page.

 * <br><br><br> 
 * <center>
 *  <span class="image">Start run request page. In this case the user has multiple  
@ref RC_Edit_On_Start "Edit-on-start parameters"  defined.</span>
 * <br><br><br>
 *  \image html mhstart.gif
 * </center>
 * <br><br><br>  

The title of each field is the ODB key name itself. If the keyname is not self-explanatory, more
explanation can be supplied by creating @ref RC_Edit_PC .


<br><hr><br>


@subsection RC_EOS_web_features Features available for mhttpd only

Several extra <b>Edit on start</b> features are available when using the mhttpd task 
for starting the run, which are ignored by odbedit. These are described below:

- @ref RC_Edit_PC 
- @ref RC_Prevent_Edit_RN 


<br><hr><br>

@subsection RC_Edit_PC Parameter Comments

An optional subdirectory <b>Parameter Comments</b> can created under the @ref RC_ODB_Experiment_Tree to
display some extra text on the Start page under an <b>Edit on start</b> parameter. Usually the 
parameter names are self-explanatory, but the parameter name may not contain enough information. 
In this case, a <b>parameter comment</b> can be created by the user.  

This "parameter comment" option is visible \b ONLY under the midas
web page (\b mhttpd ), the <b> odbedit start </b> command will not display this extra information.


The name of the parameter in the <b>Parameter Comments</b> subdirectory must match that of the <b>Edit on Start</b>
parameter. Comments may contain html tags if desired.
<br>
\note
If the parameter in Edit-on-start is a link which is named differently from the actual parameter,
then the parameter name in <b>Parameter Comments</b> must match the name of the actual parameter, rather than
the link-name.

This is illustrated below where the  <b>Edit on Start</b> parameter is a link named \b "number of channels", which
links to the actual parameter  <b> /sis/nchannels </b>.
@code
number of channels              LINK    1     15    22m  0   RWD  /sis/nchannels
@endcode
The parameter name in <b>Parameter Comments </b> for this parameter is 
nchannels               STRING  1     64    14m  0   RWD  <i>maximum 1024</i>
and NOT "number of channels".


@code
[local:midas:S]/Experiment>ls -lr
Key name                        Type   #Val  Size  Last Opn Mode Value
---------------------------------------------------------------------------
Experiment                      DIR
    Name                        STRING  1     32    17s  0   RWD  midas
    Edit on Start               DIR
        Write data              BOOL    1     4     16m  0   RWD  y
        enable                  BOOL    1     4     16m  0   RWD  n
        nchannels               INT     1     4     16m  0   RWD  0
        dwelling time (ns)      INT     1     4     16m  0   RWD  0


    Parameter Comments          DIR
        Write Data              STRING  1     64    44m  0   RWD  Enable logging
        enable                  STRING  1     64    7m   0   RWD  Scaler for expt B1 only
        nchannels               STRING  1     64    14m  0   RWD  <i>maximum 1024</i>
        dwelling time (ns)      STRING  1     64    8m   0   RWD  <b>Check hardware now</b>

[local:midas:S]Edit on Start>ls -l

Key name                        Type   #Val  Size  Last Opn Mode Value
---------------------------------------------------------------------------
Write Data                      LINK    1     19    50m  0   RWD  /logger/Write data
enable                          LINK    1     12    22m  0   RWD  /sis/enable
number of channels              LINK    1     15    22m  0   RWD  /sis/nchannels
dwelling time (ns)              LINK    1     24    12m  0   RWD  /sis/dwelling time (ns)
@endcode 

This results in a start run page as shown below.

@anchor RC_param_comment_example

 * <br><br><br>
 * <center>
 *  <span class="image">  Start run request page. Extra comment on the run condition is displayed below each
entry.
 * <br><br><br>
 *  \image html mhstart2.gif
 * </span></center>
 * <br><br><br>  

<br>

<br><hr><br>


@subsection RC_Prevent_Edit_RN Prevent the run number being edited at Run Start
@anchor RC_Edit_RN

By default, the user has the option to edit the run number at begin of run. To prevent this,
the user may add an optional key <b>Edit run number</b> to the <b>Edit on Start</b> subdirectory
in the  @ref  RC_ODB_Experiment_Tree. If this key
is set to "N", the user will not be able to edit the run number on the mhttpd start page at the begin of run. 

This feature is required where the run number is strictly controlled with a custom run number
  checking system that assigns the run number automatically based on the type of run (e.g. "real" or "test"), 
  and also to avoid holes in the run number sequence due to failed runs.

By creating the key
  <b> /Experiment/Edit on Start/Edit run number</b> 
  as a boolean variable, the ability of editing the run number is
  enabled or disabled, e.g.
@code 
[local:Default:S]Edit on start>create BOOL "Edit run number"
@endcode

By default, if this key is NOT present the run number IS editable.  

 * <br><br><br>
 * <center>
 *  <span class="image">Start run request page showing the run number write-protected.  
@ref RC_Edit_PC are also  defined.
 * <br><br><br> 
 *  \image html bnmr_start_fixedrn.gif
 * </span></center>
 * <br><br><br>  
<br>

\note This feature is ignored by odbedit; regardless of whether "Edit run number" is present, the run number may 
be edited by odbedit. 



<br><br><br>
 
\htmlonly
<script type="text/javascript">
pages("RC_mhttpd_Main_Status_page", "RunControl","RC_mhttpd_ODB_page","RC_mhttpd_Start_page","" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>

\anchor end
<!-- end of page RC_mhttpd_Start_page -->
*/





<!-- ------------ O D B  P A G E  ------- -->

/*! \page RC_mhttpd_ODB_page ODB page
\anchor idx_mhttpd_page_ODB
<br>
 
\htmlonly
<script type="text/javascript">
pages("RC_mhttpd_Start_page", "RunControl", "RC_mhttpd_Equipment_page", "RC_mhttpd_ODB_page","end" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>

The ODB page is displayed by clicking on the "ODB"  @ref RC_mhttpd_status_Page_buttons "page switch button"
(@ref RC_mhttpd_status_menu_buttons "if present") on 
the @ref RC_mhttpd_pol_status_example "main status page"  .
The ODB page initially displays the ODB root tree. Clicking on the hyperlink "/", "Equipment" .. "Channels" will take
you to the requested ODB field. The <b> Example </b> below show the sequence for changing
the variable "PA" under the /Equipment/PA/Settings/Channels ODB directory.

If the ODB is @ref RC_Access_Control "Write protected", a <b> popup window will request the web password </b> before
you can change a value.

 * <br><br><br>
 * <center>
 *  <span class="image">  ODB page access
 * <br><br><br> 
 *  \image html mhedit.gif
 * </span></center> 
 * <br><br><br>  
<br>

The ODB page does include some capability of editing the ODB values and creating new keys. But for copying ODB trees,
saving and reloading the ODB, re-ordering the keys etc., @ref RC_odbedit_task "odbedit" must be used.


 
\htmlonly
<script type="text/javascript">
pages("RC_mhttpd_Start_page", "RunControl", "RC_mhttpd_Equipment_page", "RC_mhttpd_ODB_page","" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
\anchor end
<!-- end of Page  RC_mhttpd_ODB_page -->
*/

<!-- ------------ E Q U I P M E N T  P A G E  ------- -->

/*! \page RC_mhttpd_Equipment_page Equipment page
\anchor idx_mhttpd_page_equipment
<br>
 
\htmlonly
<script type="text/javascript">
pages( "RC_mhttpd_ODB_page", "RunControl", "RC_mhttpd_sc_page","RC_mhttpd_Equipment_page","end" ); // back index next {top bottom}
</script>
\endhtmlonly
 

<br>

@section  RC_mhttpd_Equipment_var  Equipment hyperlinks
The Equipment page is displayed by clicking on one of the <b> equipment hyperlinks </b> on the  
@ref RC_mhttpd_pol_status_example "main status page". This provides a short-cut so the user may quickly see
the values of the parameters in the <b> /Equipment/.../Variables/ </b> subdirectory. The values in the
/Equipment/.../Variables subdirectory are filled by the associated frontend (see @ref Frontend_code) if either
 - the @ref  FE_tbl_ReadOn "RO_ODB" flag  or
 - the @ref  FE_tbl_History "History value"
in the corresponding  @ref FE_Equipment_list is non-zero.
<br>
The data of Equipments that do not have either of these flags set cannot be viewed in this way.
<br> 

<br><hr><br>


@subsection RC_mhttpd_Equipment_example1 Example showing data from two Equipments

In the example below, the links \b "cycle_scalers" and 
\b "info_odb" have been clicked. The resulting pages show a list of variables defined by the respective equipments. 
Both these equipments send their data to the ODB
(using the  @ref  FE_tbl_ReadOn "RO_ODB" flag).

 * <br><br><br>
 * <center>
 * <span class="image">  Clicking on "cycle_scalers" or on "info_odb" on Status page shows variable list
 * <br><br><br> 
 *  \image html pol_cycle_popup.gif
 * </span></center> 
 * <br><br><br>  

<br>

The illustration above shows how the mhttpd display combines the names of the variables in a 
@ref  FE_MIDAS_event_construction "Midas format event" 
with the variables read out in the equipment's data banks. The \b "cycle_scalers" equipment has been set up 
in the ODB so that the scaler names are listed under the array \b "Names" in /Equipment/Cycle_Scalers/Settings .
They all belong to "Scaler_B", which can be seen as a hyperlink in the above illustration. If there were
some settings included for "Scaler_A" for example, two hyperlinks would be shown, "Scaler_A" and "Scaler_B". 
Clicking on the hyperlink "Scaler_A" would show only the settings for Scaler_A.
@code
[pol@isdaq01 ~]$ odb
[local:pol:S]/>ls /Equipment/Cycle_Scalers/Settings/
Names
 
                                Scaler_B%SIS Ref pulse
                                Scaler_B%Fluor. mon
                                Scaler_B%P+ beam
                                Scaler_B%Laser power
                                Scaler_B%Faraday Cup 15
                                Scaler_B%Locking Feedback
[local:pol:S]/> 
@endcode
In the odb directory  /Equipment/Cycle_Scalers/Variables/ two arrays are shown, CYCI and HSCL. These are
the names of two data banks sent out by the frontend. The data from the banks is also sent to the ODB,
so it can be displayed. The data shown below for CYCI and HSCL is for a different event from that in the
variable list in the illustration above.

@code
[local:pol:S]/>ls /Equipment/Cycle_Scalers/Variables/
CYCI
                                2824
                                2824
                                4
                                0
                                8
                                0
HSCL
                                8222499
                                2
                                8384
                                3173
                                2
                                50
[local:pol:S]/> 
@endcode
 The second equipment illustrated @ref RC_mhttpd_eq_variables  "above" is \b info_odb. This is a @ref FE_FIXED_event_readout "FIXED format" event. The variables are of different types, 
so cannot be output as a MIDAS event. The variables are listed
under /Equipment/info_odb/Variables. In this case, there is no information listed in the subdirectory 
Settings for this equipment. The ODB is updated for every event so the information may be displayed by the user.
@code
[local:pol:S]/>ls "/Equipment/Info ODB/variables"
Key name                        Type    #Val  Size  Last Opn Mode Value
---------------------------------------------------------------------------
helicity                        DWORD   1     4     15h  0   RWD  0
current cycle                   DWORD   1     4     15h  0   RWD  2825
cancelled cycle                 DWORD   1     4     15h  0   RWD  1
current scan                    DWORD   1     4     15h  0   RWD  4
Ref P+ thr                      DOUBLE  1     8     15h  0   RWD  8316
Ref Laser thr                   DOUBLE  1     8     15h  0   RWD  3233
Ref Fcup thr                    DOUBLE  1     8     15h  0   RWD  1
Current P+ thr                  DOUBLE  1     8     15h  0   RWD  8384
Current Laser thr               DOUBLE  1     8     15h  0   RWD  3173
Current Fcup thr                DOUBLE  1     8     15h  0   RWD  2
RF state                        DWORD   1     4     15h  0   RWD  0
Fluor monitor counts            DWORD   1     4     15h  0   RWD  2
EpicsDev Set(V)                 FLOAT   1     4     15h  0   RWD  0
EpicsDev Read(V)                FLOAT   1     4     15h  0   RWD  0
Campdev set                     FLOAT   1     4     15h  0   RWD  0
Campdev read                    FLOAT   1     4     15h  0   RWD  0
Pol DAC set                     DOUBLE  1     8     15h  0   RWD  0
Pol DAC read                    DOUBLE  1     8     15h  0   RWD  0
last failed thr test            DWORD   1     4     15h  0   RWD  0
cycle when last failed thr      DWORD   1     4     15h  0   RWD  0
[local:pol:S]/>         
@endcode

<br>
<br><hr><br>

@subsection RC_mhttpd_Equipment_example2 Example showing Slow Control data

In the case where the equipment is a <b> slow control </b> equipment, clicking on the
 <b> equipment hyperlink </b> on the  @ref RC_mhttpd_pol_status_example "main status page"
will show a parameter table (see below). This may be hyperlinked for parameter modification.
This option is possible only if the parameter names have a particular name syntax. 
<br>See also

         - \subpage RC_mhttpd_sc_page (Equipment info specific to Slow Control)

 * <br><br><br>
 * <center>
 *  <span class="image">  Slow control page.
 * <br><br><br>
 *  \image html mhsc.gif
 * </span></center>
 * <br><br><br>  


<br>
 
\htmlonly
<script type="text/javascript">
pages( "RC_mhttpd_ODB_page", "RunControl", "RC_mhttpd_sc_page","RC_mhttpd_Equipment_page","" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
\anchor end
<!-- end of Page RC_mhttpd_Equipment_page -->
*/

<!-- ------------ S L O W  C O N T R O L   P A G E  ------- -->

/*! \page  RC_mhttpd_sc_page Slow Control page
\anchor idx_mhttpd_page_slow-control
<br>
 
\htmlonly
<script type="text/javascript">
pages("RC_mhttpd_Equipment_page",  "RunControl","RC_mhttpd_CNAF_page", "RC_mhttpd_sc_page","end" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>

The Slow Control page refers to the specific display of a Slow control equipment (see @ref  FE_Slow_Control_system). 
This is a special Equipment page that may be accessed from the main Status page 
by clicking on the equipment hyperlink (see  @ref RC_mhttpd_Equipment_page) .
<br>
In this case, the matching information (defined under "Settings") of the Equipment variables defined under "Variables"
will be combined to compose a table. 
Each variable in the table may be editable depending on the following rules
-# If the variable name is defined as "Demand[]" or "Output[]" or "D_<var_name>" under "Settings/" it will be editable by default.
-# If the variable name is defined under "Settings" and the variable name is also defined under the array "Settings/Editable[]" it will be editable.

@code
[local:Default:S]/>cd Equipment/MSCB/Settings/
[local:Default:S]Settings>ls
[local:Default:S]Settings>ls
Names
                                Drift Voltage (KV)
                                Drift Current (uA)
                                uC Temperature (C)
DD
Offset
                                0
                                1
                                1
Gain
                                0
                                3
                                4
Editable                        Gain
@endcode

 * <br><br><br>
 * <center>
 *  <span class="image">  Slow control Equipment page.
 * <br><br><br>
 *  \image html mhsceqp.jpg
 * </span></center>
 * <br><br><br>  


See also @ref  RC_mhttpd_Equipment_example2 .

<br>
 
\htmlonly
<script type="text/javascript">
pages("RC_mhttpd_Equipment_page",  "RunControl","RC_mhttpd_CNAF_page", "RC_mhttpd_sc_page","" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>

\anchor end
<!-- End of RC_mhttpd_sc_page -->
*/


<!-- ------------ C N A F    P A G E  ------- -->

/*! \page   RC_mhttpd_CNAF_page CNAF page
\anchor idx_mhttpd_page_CNAF
<br>
 
\htmlonly
<script type="text/javascript">
pages("RC_mhttpd_sc_page",  "RunControl", "RC_mhttpd_Message_page", "RC_mhttpd_CNAF_page","end" ); // back index next {top bottom}
</script>
\endhtmlonly
 

<br>

The CNAF page is accessed by clicking on the CNAF button  (@ref RC_mhttpd_status_menu_buttons "if present") on the Main Status page.  will only be active
If one of the active equipments is a CAMAC-based data collector, it will be possible to
remotely access CAMAC through this web-based CAMAC page (accessed by clicking the 
@ref RC_mhttpd_status_menu_buttons "CNAF button" on the @ref RC_mhttpd_pol_status_example "main status page").
<br>
The status of the connection
is displayed in the top right hand side corner of the window.

 * <br><br><br>
 * <center>
 *  <span class="image">  CAMAC command pages.
 * <br><br><br> 
 *  \image html mhcnaf.gif
 * </span></center>
 * <br><br><br>  



<br>
 
\htmlonly
<script type="text/javascript">
pages("RC_mhttpd_sc_page",  "RunControl", "RC_mhttpd_Message_page", "RC_mhttpd_CNAF_page","" ); // back index next {top bottom}
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>

\anchor end
<!-- end of RC_mhttpd_CNAF_page -->
*/


<!-- ------------ M E S S A G E   P A G E  ------- -->

/*! \page    RC_mhttpd_Message_page Message page
\anchor idx_mhttpd_page_message
<br>
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages("RC_mhttpd_CNAF_page",  "RunControl","RC_mhttpd_Elog_page", "RC_mhttpd_Message_page", "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>

This page (accessed by clicking the @ref RC_mhttpd_status_Page_buttons "Message button"  @ref RC_mhttpd_status_menu_buttons "if present"
 on the @ref RC_mhttpd_pol_status_example "main status page" )
displays the contents of the Midas System log file in blocks of 100 lines
starting with the most recent messages. The Midas log file resides in the directory
defined @ref  F_Log_File "in the ODB".


 * <br><br><br>
 * <center>
 *  <span class="image">  Message page.
 * <br><br><br>
 *  \image html mhmes.gif
 * </span></center>
 * <br><br><br>  

<br>
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages("RC_mhttpd_CNAF_page",  "RunControl","RC_mhttpd_Elog_page", "RC_mhttpd_Message_page", "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
\anchor end
<!-- end of page RC_mhttpd_Message_page -->
*/

<!-- ------------ E L O G   P A G E  ------- -->

/*! \page   RC_mhttpd_Elog_page Elog page
\anchor idx_mhttpd_page_elog
<br>
 
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Message_page", "RunControl", "RC_mhttpd_Program_page", "RC_mhttpd_Elog_page", "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>

\anchor Elog_200

@section RC_mhttpd_Elog_intro Introduction
The ELOG page  (accessed by clicking the @ref RC_mhttpd_status_Page_buttons "Elog button"  @ref RC_mhttpd_status_menu_buttons "if present"
 on the @ref RC_mhttpd_pol_status_example "main status page" ) provides access to an electronic logbook. 
This tool can replace the 
experimental logbook for daily entries. The main advantage of the Elog over a paper logbook  is the possiblity 
to access it remotely, and provide a general knowledge of the experiment.
On the other hand, the Elog is not limited strictly to experiments. Worldwide Elog implementations can be found 
on the internet.

Since Midas version 2.0.0, Elog comes in two flavours, i.e
 - @ref RC_mhttpd_Internal_Elog where the Elog is built in the mhttpd Midas web interface, or 
 - @ref RC_mhttpd_External_Elog where the Elog runs independently from the experiment and  mhttpd as well.


While the internal doesn't requires any setup, the latter requires a proper
Elog installation which is fully described on the
<a href="http://midas.psi.ch/elog/">Elog</a> web site.
The External Elog implementation requires a dedicated entry in the ODB as shown in the code below. It also requires
the package \b Elog to be already installed, and properly configured. Once the ODB entry is present, the internal 
ELOG is disabled.


<hr> 

@subsection RC_mhttpd_Internal_Elog  Internal Elog

By default the mhttpd provides the internal Elog. The entry destination directory is established by the logger key in ODB (see @ref  F_Logger_Elog_Dir "Elog Dir")
The Electronic Log page shows the most recent Log message recorded in the system. The top buttons allows you to either Create/Edit/Reply/Query/Show a message

 * <br><br><br>
 * <center>
 *  <span class="image">  main Elog page.
 * <br><br><br>
 *  \image html mhelog.gif
* </span></center>
 * <br><br><br>  

The format of the message log can be written in HTML format.

 * <br><br><br>
 * <center>
 *  <span class="image">  HTML Elog message.
 * <br><br><br>
 *  \image html mheloghtml.gif
 * </span></center>
 * <br><br><br>  

- A feature of the Elog entry page is the <b>Shift Check</b> button, this permits the 
experimenter on shift to go through a checklist and record his/her findings in the Elog
system. The checklist is user-defined and can be found in the ODB under <b>/Elog</b>

 * <br><br><br>
 * <center>
 *  <span class="image">  HTML Elog message.
 * <br><br><br>
 *  \image html melogforms.png
 * </span></center>
 * <br><br><br>  

- The code below generates the above screen. The key <i>Gas Handling</i> contains all the 
information for a given form. There is no limit to the number of entries. By specifying
an entry with the name <i>Attachment0</i>,<i>Attachment1</i>,... and filling it with a fix file
name, its content will be attached to the Elog entry for every shift report. 

@code
[local:myexpt:Running]/>cd /Elog/
[local:myexpt:Running]/Elog>mkdir Forms
[local:myexpt:Running]/Elog>cd Forms/
[local:myexpt:Running]Forms>mkdir "Gas Handling"
[local:myexpt:Running]Forms>cd "Gas Handling"
[local:myexpt:Running]Gas Handling>create string "N2 Pressure"
String length [32]: 
[local:myexpt:Running]Gas Handling>create string "Vessel Temperature"
String length [32]: 
[local:myexpt:Running]Gas Handling>ls
N2 pressure              
Vessel Temperature              
[local:myexpt:Running]Gas Handling>
[local:xenon:Running]Gas Handling>create string Attachment0 
String length [32]: 64
[local:xenon:Running]Gas Handling>set Attachment0 Gaslog.txt
@endcode

- The \b runlog button display the content of the file \b runlog.txt which is
expected to be in the data directory specified by the ODB key <b>/Logger/Data Dir</b>.
Regardless of its content, it will be displayed in the web page.
Its common uses is to \b append lines after every run.
The task appending this run information can be any of the midas application.
<b> Example </b> is available in the <i>examples/experiment/analyzer.c</i> which at each
end-of-run (EOR) will write to the runlog.txt some statistical informations.


 * <br><br><br>
 * <center>
 *  <span class="image">  Elog page, Runlog display.
 * <br><br><br> 
 *  \image html mhelogrun.gif
  * </span></center> * <br><br><br>  

- When composing a new entry into the Elog, several fields are available to specify
the nature of the message i.e: Author, Type, System, Subject. Under Type and
System a pulldown menu provides multiple category. These categories are user definable
through the odb under the tree \b /Elog/Types, \b /Elog/Systems. The number of categories
is fixed to 20 maximum, but any remaining field can be left empty.

 * <br><br><br>
 * <center>
 *  <span class="image">  Elog page, New Elog entry form.
 * <br><br><br> 
 *  \image html mhelognew.gif
 * </span></center> 
 * <br><br><br>  

<hr> 

@subsection RC_mhttpd_External_Elog  External Elog
The advantage of using the external Elog over the built-in version is its flexibility.
This package is used worldwide and improvements are constantly being made. A full-features
documentation and standalone installation can be found at the
<a href="http://midas.psi.ch/elog/">Elog</a> web site.

Its installation requires requires several steps described below.
- Download the Elog package from the web site mentioned above.
 - Windows, Linux, Mac version can be found there. Simple installation procedures
   are also described. Its installation can be done at the system level or at the
   user level. The Elog can service multiple Electronic logbooks in parallel and 
   therefore an extra entry in its configuration file can provide specific experimental
   elog in a similar fashion as the internal one.
 - You need to take note of several consideration for its installation. You need
   to determine several locations for the different files that elog deals with.
  - elog resource directory ( e.g. /elog_installation_dir where elog is installed)
  - logbook directory (ex: /myexpt/logbook where the pwd and elog entries are stored).
    The pwd file uses encryption for the user password.
 - As this Elog installation is tailored towards an experiment, a restriction applies i.e. <i> ensure that the mhttpd and elog applications shares at least the same file system.</i>
   <br>This means that either 
        - both applications runs on the same machine or 
        - a nsf mount provides file sharing.
  - You need to know the node and ports for both applications. Like mhttpd, elogd also requires a
    port number for communication through the web (e.g. NodeA:mhttpd -p 8080, NodeB:elogd -p 8081).
  -# copy the default midas/src/elogd.cfg from the midas distrbution to your operating directory.
  -# modify the elogd.cfg to reflect your configuration
  @code
  # This is a simple elogd configuration file to work with Midas
  # $Id: mhttpd.dox 4032 2007-11-02 17:13:52Z amaudruz $ 

  [global]
  ; port under which elogd should run
  port = 8081                             
  ; password file, created under 'logbook dir'
  password file = elog.pwd                
  ; directory under which elog was installed (themes etc.)
  resource dir = /elog_installation_dir     
  ; directory where the password file will end up
  logbook dir = /myexpt/logbook     
  ; anyone can create it's own account
  self register = 1                       
  ; URL under which elogd is accessible
  url = http://ladd00.triumf.ca:8081      
  ; the "main" tab will bring you back to mhttpd
  main tab = Xenon                        
  ; this is the URL of mhttpd which must run on a different port
  main tab url = http://NodeA:8080
  ; only needed for email notifications
  smtp host = your.smtp.host              
  ; Define one logbook for online use. Severl logbooks can be defined here
  [MyOnline]
  ; directory where the logfiles will be written to
  Data dir = /myexpt/logbook            
  Comment = My MIDAS Experiment Electronic Logbook
  ; mimic old mhttpd behaviour
  Attributes = Run number, Author, Type, System, Subject     
  Options Type = Routine, Shift Summary, Minor Error, Severe Error, Fix, Question, Info, Modification, Alarm, Test, Other, 
  Options System = General, DAQ, Detector, Electronics, Target, Beamline
  Extendable Options = Type, System
  ; This substitution will enter the current run number
  Preset Run number = $shell(odbedit -e myexpt -h NodeA -d Runinfo -c 'ls -v \"run number\"')    
  Preset Author = $long_name
  Required Attributes = Type, Subject
  ; Run number and Author cannot be changed
  Locked Attributes = Run number, Author  
  Page Title = ELOG - $subject
  Reverse sort = 1
  Quick filter = Date, Type, Author
  ; Don't send any emails
  Suppress email to users = 1             
@endcode
  -# start the elog daemon. <b>-x</b> is for the shell substitution of the
    command <i>Preset Run number = $shell(...)</i>
    The argument invokes the odbedit remotely if needed to retrieve the current run number.
    You will have to ensure the proper path to the odbedit and the proper -e, -h argments for
    the experiment and host. You may want to verify this command from the console.
@code
  NodeB:~>/installation_elog_dir/elogd -c elogd.cfg -x
@endcode
  -# start the mhttpd at its correct port and possibly in the daemon form.
@code
  NodeA:~>mhttpd -p 8080 -D 
@endcode
  -# At this point the Elog from the Midas web page is accessing the internal Elog.
    To activate the external Elog, include in the ODB two entries such as:
@code
   NodeX:> odbedit -e myexpt -h NodeA
   [NodeX:myexpt:Running]/>cd elog
   [NodeX:myexpt:Running]/Elog>create string Url
   String length [32]: 64
   [NodeX:myexpt:Running]/Elog>set Url http://NodeB:8081/MyOnline
   [NodeX:myexpt:Running]
   [NodeX:myexpt:Running]/Elog>create string "Logbook Dir"
   String length [32]: 64
   [NodeX:myexpt:Running]/Elog>set "Logbook Dir" /myexpt/logbook

   [NodeX:myexpt:Running]/Elog>ls
Logbook Dir                     /home/myexpt/ElogBook
Url                             http://NodeB:8081/MyOnline
@endcode
  -# Confirm proper operation of the external Elog by creating an entry. You will be
    prompted for a username and password. Click on New registration. Full control of 
    these features are described in the Elog documentation.
  -# Stop and restart the Elogd in the background. 
@code
   NodeB:~>/installation_elog_dir/elogd -c elogd.cfg -x -D
@endcode
  -# In the event you had a previous entry under the internal elog, you can convert the
    internal to external using the elconv tool.
@code
   NodeB:~> cp internal/elog_logbook/*.log /myexpt/logbook/.
   NodeB:~> cd /myexpt/logbook
   NodeB:~> /installation_elog_dir/elconv
@endcode

<br>
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Message_page", "RunControl", "RC_mhttpd_Program_page", "RC_mhttpd_Elog_page", "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
\anchor end
<!-- end of page RC_mhttpd_Elog_page -->
*/


<!-- ------------ P R O G R A M   P A G E  ------- -->

/*! \page   RC_mhttpd_Program_page Programs page 
\anchor idx_mhttpd_page_program
<br>
 
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages(  "RC_mhttpd_Elog_page", "RunControl",  "RC_mhttpd_History_page", "RC_mhttpd_Program_page", "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
The \b Programs page is displayed by clicking on the \b Programs \b Button on the  @ref RC_mhttpd_Main_Status_page
( @ref RC_mhttpd_status_menu_buttons "if present").

This page presents the current active list of the clients (i.e. tasks) attached to the given
experiment. On the right hand side, a dedicated button allows the user to stop a particular task.
This is equivalent to the @ref RC_odbedit_sh "ODBedit shutdown" command. For example, pressing
the <b>"stop Speaker"</b> button  (see example below) would be equivalent to 
@code
odbedit> sh Speaker
@endcode

Clicking the taskname hyperlink (on the left hand side of the page) pops up a new window pointing to the 
ODB <b>/Programs</b> subdirectory related to that particular task (see @ref RC_ODB_programs_tree). 
Example 1 shows the Programs page with a number of tasks running. The hyperlink for the task \b ltnoRC has been clicked,
and the popup window shows the ODB path <b>/Programs/ltnoRC</b>. 

 * <br><br><br>
 * <center>
 * <span class="image">
 * Example 1: mhttpd Programs page.
 * <br><br><br>
 *  \image html mhprg.gif
* </span>
 * </center>
 * <br><br><br>
 
The ODB structure for  @ref RC_ODB_programs_client "each task" should be  customized by the 
user (see @ref  RC_customize_Programs_tree ). 
<br>
\note The buttons and other information that appears on the \b Programs mhttpd
page depends on the settings of the fields of the /Programs/\<\em client \> subdirectory.


\anchor RC_mhttpd_Required
Example 2  shows the case where \b mlogger is running, but is not \b Required 
(i.e. @ref RC_programs_Required "/Programs/logger/required" is false). When \b mlogger is stopped by pressing the
key <b>"Stop Logger"</b> on the \b Programs page,  the \b Logger program is no longer displayed.
This is because <span class="note"> clients which are not \b Required are not shown in the \b Programs page unless they are running.</span>



 * <br><br><br>
 * <center>
 * <span class="image">
 * Example 2: Programs page - mlogger task is not  @ref  RC_mhttpd_Required "Required" 
 * <br><br><br>
 *  \image html program1.png
 * </span>
 * </center>
 * <br><br><br>

In Example 3, mlogger's  @ref RC_mhttpd_Required "Required" flag has been set true. 
In this case, when mlogger is stopped
the line for the Logger program is retained. Because a   @ref RC_programs_Start_command "Start Command" 
has been supplied, the <b>"Start Logger" 
button</b> is displayed. Pressing this will cause the <b>Start Command</b> to be issued, and mlogger should start.
The <b> /Programs/\< \em client \> tree </b> also provides for a client to be @ref RC_customize_Programs_tree 
"automatically started or restarted".

Note that an  @ref RC_programs_Alarm_class "Alarm Class" has also been supplied, giving rise to the <b>Alarm banner</b> 
on the main status page. See  @ref  RC_Alarm_System for details.

 * <br><br><br><center>
 * <span class="image">
 * Example 3: Programs page - mlogger task \b is  @ref RC_programs_Required "Required" and an alarm class has been specified
 * <br><br><br>
 *  \image html program.png
 * </span></center>
 * <br><br><br>



<br>
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages(  "RC_mhttpd_Elog_page", "RunControl",  "RC_mhttpd_History_page", "RC_mhttpd_Program_page", "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
\anchor end
<!-- end of page RC_mhttpd_Program_page -->
*/


<!-- ------------ H I S T O R Y   P A G E  ------- -->

/*! \page  RC_mhttpd_History_page History page
\anchor idx_mhttpd_page_history
<br>
 
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Program_page",  "RunControl",  "RC_mhttpd_Alarm_page", "RC_mhttpd_History_page", "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
The \b History page is displayed by clicking on the \b History \b Button on the  @ref RC_mhttpd_Main_Status_page
( @ref RC_mhttpd_status_menu_buttons "if present").

This page reflects the @ref F_History_logging "History System" settings (CVS r1.271). It lists on the
top of the page the possible group names containing a list of panels defined in
the ODB.
Next a series of buttons defines the time scale of the graph with predefined time
window, <b> "<<","<" "+" "-" ">" ">>" </b> buttons permit the shifting of the
graph in the time direction. Other buttons will allow graph resizing, Elog attachment
creation, configuration of the panel and custom time frame graph display.
By default a single group is created "Default" containing the trigger rate for the
"Trigger" equipment.

The configuration options for a given panel consists in:
- Zooming capability, run markers, logarithmic scale.
- Data query in time.
- Time scale in date format.
- Web based page creation ("new" button) for up to 10 history channels per page.

 * <br><br><br>
 * <center>
 *  <span class="image">  History page.
 * <br><br><br> 
 *  \image html history20.jpg
 * </span></center>
 * <br><br><br>  

 * <br><br><br>
 * <center>
 *  <span class="image">  History channel selection Page.
 * <br><br><br>
 *  \image html historyselect.jpg
  * </span></center>
 * <br><br><br>  

<br>
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Program_page",  "RunControl",  "RC_mhttpd_Alarm_page", "RC_mhttpd_History_page", "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
\anchor end
<!-- end of PAGE  RC_mhttpd_History_page -->
*/



<!-- ------------ A L A R M   P A G E  ------- -->

/*! \page   RC_mhttpd_Alarm_page Alarm page
<br>
\anchor idx_mhttpd_page_alarm 
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_History_page", "RunControl","RC_mhttpd_MSCB_page",  "RC_mhttpd_Alarm_page", "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>

By clicking on the \b Alarms button (@ref  RC_mhttpd_status_menu_buttons "if present")  on the
@ref  RC_mhttpd_Main_Status_page, the Alarms mhttpd page appears.
This page presents information about the @ref  RC_Alarm_System  from the  @ref RC_ODB_Alarms_Tree . 
By clicking on the hyperlinks on this Alarms page, you can navigate directly to the alarm class and
setup of a particular alarm under the /Alarms tree. In the example below, the name of the alarm that has gone off 
is "fepol" and the alarm class is "Caution". Buttons are provided so that all or individual activated alarms can 
be reset.
 

 * <br><br><br>
 * <center>
 *  <span class="image">  
 * <br><br><br>
 *  \image html pol_alarms_page_fepol.png
 * </span></center>
 * <br><br><br>  

\anchor RC_mhttpd_alarm_banner
When an alarm has goes off, a banner will appear on the Midas Main Status page.

This following image shows the Main status page for the TRIUMF Pol experiment running with the alarm system
enabled. The alarm on "fepol" has gone off, resulting in a large coloured banner with an alarm message.   

 * <br><br><br>
 * <center>
 *  <span class="image"> 
 * <br><br><br>
 *  \image html pol_fepol_alarm_status.png
 * </span></center>
 * <br><br><br>  

\anchor RC_odb_alarm_msg
If running @ref RC_odbedit_task "odbedit", a message appears on the screen as follows: 
@code
[pol@isdaq01 ~]$ odb
Caution: Program fePOL is not running
[local:pol:S]/> 
@endcode

The alarm class in this case is "Caution" and the message is "Program fePOL is not running". These
fields have been set up in the  @ref RC_ODB_Alarms_Tree ODB as described in the @ref RC_Alarm_System .


A separate banner will appear for each alarm that is activated. Here three alarms of three different classes
are activated. The classes have been set up with different colours for each class of alarm:
 * <br><br><br>
 * <center>
 *  <span class="image">  Midas Main Status page showing three alarm banners
 * <br><br><br>
 *  \image html three_alarms.png
 * </span></center>
 * <br><br><br>  
 


 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_History_page", "RunControl","RC_mhttpd_MSCB_page",  "RC_mhttpd_Alarm_page", "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
\anchor end
<!-- end of PAGE RC_mhttpd_Alarm_page  -->
*/


<!-- ------------ M S C B   P A G E  ------- -->

/*! @page    RC_mhttpd_MSCB_page MSCB page
<br>
\anchor idx_mhttpd_page_MSCB
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Alarm_page", "RunControl","RC_mhttpd_Alias_page",  "RC_mhttpd_MSCB_page", "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly



<span class = "new">The MSCB (Midas Slow Control Bus) page is a new page that has been recently implemented in
mhttpd (@ref ndf_dec_2009) </span>.

<br> This allows web access to all devices in an
<a href="http://midas.psi.ch/mscb">MSCB system</a>  and to their variables:

 * <br><br><br>
 * <center>
 *  <span class="image">  An example of an MSCB page
 * <br><br><br>
 *  \image html mhttpd_MSCB.png
 * </span></center>
 * <br><br><br>  
<br>


In order to create the MSCB page, the flag
<br> <b>-DHAVE_MSCB</b>
<br> must be present in the Makefile for mhttpd. This is now the default in the Makefile from SVN, but it can be taken out for experiments
not using MSCB. If the flag is present, mhttpd is linked against <b>midas/mscb/mscb.c</b> and has direct access to all
mscb ethernet submasters (USB access is currently disabled on purpose there).
The presence of the  flag <b>-DHAVE_MSCB</b> will cause the MSCB button to appear on the main status page by default, unless
the  @ref RC_mhttpd_status_menu_buttons "menu buttons" have been customized, in which case the MSCB key must be listed
in the ODB Key <span class="odb">/Experiment/Menu Buttons"</span><br>e.g.
\code
/Experiment/Menu Buttons = Start, ODB, Messages, ELog, Alarms, Programs, History, MSCB, Config, Help
\endcode


The MSCB page uses the ODB Tree <b>/MSCB/Submasters/...</b> to obtain a list of all available submasters:<br>

\code
[local:MEG:R]/MSCB>ls -r
MSCB
    Submaster
        mscb004
            Pwd                 xxxxx
            Comment             BTS
            Address             1
        mscb034
            Pwd                 xxxxx
            Comment             XEC HV & LED
            Address
                                0
                                1
                                2

\endcode

Each submaster tree contains an optional password needed by that submaster, an optional comment
(which will be displayed on the 'Submaster' list on the web page), and an array of node addresses.<br>
<br>
These trees can be created by hand, but they are also created automatically by mhttpd if the <span class="odb">/MSCB/Submaster</span>
entry is not present in the ODB. In this case, the equipment list is scanned and all MSCB devices and addresses are collected from locations
such as
<br>
<span class="odb">/Equipment/&lt;name&gt;/Settings/Devices/Input/Device</span><br>

or
<br>
<span class="odb">/Equipment/&lt;name&gt;/Settings/Devices/&lt;name&gt;/MSCB Device</span><br>
which are the locations for MSCB submasters used by the <b>mscbdev.c</b> and <b>mscbhvr.c</b> device drivers.
Once the tree is created, it will not be touched again by mhttpd, so devices
can be removed or reordered by hand.<br>
<br>


\anchor end
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Alarm_page", "RunControl","RC_mhttpd_Alias_page",  "RC_mhttpd_MSCB_page", "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly

<!--    END of MSCB   Page  -->
*/







<!-- ------------ A L I A S   P A G E  ------- -->

/*! @page   RC_mhttpd_Alias_page Alias page
\anchor idx_mhttpd_page_alias
\anchor idx_mhttpd_buttons_alias
<br>
 
 
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Alarm_page", "RunControl","RC_mhttpd_Custom_page",  "RC_mhttpd_Alias_page", "end" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly
 

<br>
@section RC_mhttpd_alias_buttons Alias-Buttons (or Hyperlinks)
An Alias page is displayed by clicking on a user-defined
 - <span class="new"> <b> Alias-button </b> (since @ref ndf_dec_2009 ) </span> or
 - <b> Alias hyperlink </b> (older versions) 

on the  @ref RC_mhttpd_pol_status_example "main status page".

 <span class="new"> The \b appearance of the alias-links on the Main Status page have been changed (@ref ndf_dec_2009 ) from
@ref RC_mhttpd_pol_status_example  "hyperlinks"  to @ref  RC_mhttpd_status_page_redesign "buttons"
<br>
This change has been made because the original alias hyperlinks were hard to read if they included spaces.
It also gives a more homogeneous look to the page.
See @ref   RC_mhttpd_status_page_redesign to see the new look of alias buttons.
 </span>
 The examples below show the old-style alias-links.

<br><hr><br>

@section RC_mhttpd_alias_define Creation of Alias-Buttons (or Hyperlinks) 

Alias Buttons  (or Hyperlinks) on the @ref RC_mhttpd_pol_status_example "main status page"
are defined  through the ODB  <span class="odb"> /Alias </span> tree.
<br><br>
<span class ="note">
Note that Alias and  @ref  RC_mhttpd_Activate "Custom" buttons (or hyperlinks in older versions) are displayed on the same line on the
Main Status Page.  </span>


<br><hr><br>
\anchor idx_ODB_tree_Alias
@subsection RC_odb_alias_tree Alias links - the ODB /Alias Tree
\note The   <span class="odb"> /Alias </span>  tree is applicable to @ref RC_mhttpd "mhttpd" only, and ignored by 
@ref RC_odbedit "odbedit".


This optional ODB tree provides the user with a way to access other webpages via \b buttons 
placed on the mhttpd  @ref RC_mhttpd_status_page_redesign "main Status page" (<span class="new"> versions since @ref ndf_dec_2009).</span>
or by \b hyperlinks in older versions (also on the @ref RC_mhttpd_pol_status_example "main Status page").
<br>
The \b alias-links can link to any 
webpage (remote or local);  however they are
often used to provide "shortcuts" from the main Status page
to a particular ODB location. For example, if the experiment requires frequent
reference to a list of parameters under  <span class="odb">/Equipment/Trigger/Common</span>, an <b> alias-link (or button) </b>
can be set up on the main status page to allow the user access to this tree by one  
click. 
<br>

The ODB <span class="odb">/Alias</span> key is not present until the user creates it. It is intended to
contain a list of symbolic links to any desired ODB location. Any keys created under
<span class="odb">/Alias</span> will appear as 
  @ref RC_mhttpd_status_page_redesign "Buttons" or  (in older versions) @ref RC_mhttpd_pol_status "links"
on the Main Status page with the same names as the keys created in 
the <span class="odb">/Alias</span> tree, except where noted below (i.e. alias links spawned in the same frame).
<br>
<br>
By default, the clicking of the alias-link (button) in the web interface will spawn a \b new \b frame.
To force the display of the alias page in the \b same \b frame, an <b>"&"</b> has to be appended to
the name of the alias. The \b & is stripped off the alias name when it appears on the main status page.

To make  alias-links (buttons) using @ref RC_odbedit_task "odbedit" :
@code 
odbedit
[local:pol:S] mkdir Alias          <--  Create the optional /Alias directory
[local:pol:S] cd Alias
[local:pol:S] ln /Equipment/Trigger/Common "Trig Setting"   <-- New frame, no &
[local:pol:S] ln /Equipment/Trigger/Common "Trig Setting&"  <-- Same frame, with &
@endcode 

This would create two identical alias-links (buttons) called "Trig Setting". Clicking on the first alias-link (button) would open the 
page in a new frame, clicking on the second would open it in the same frame.

In the following example, an alias-link has been set up as follows:
@code
odbedit
[local:pol:S]/>ls /alias
Hardware& -> /alias/User_hardware_dir/
                                <subdirectory>
@endcode

<span class="note">Note that the "&" appended to the alias keyname "Hardware" causes the alias link to be opened in a different frame.</span>

 * <br><br><br>
 * <center>
 *  <span class="image">  Midas Web server
 * <br><br><br>
 *  \image html pol_click_alias.gif
 * </span></center>
 * <br><br><br>  


<br>
\anchor end
<br>
\htmlonly
<script type="text/javascript">
// pages parameters: back index next {top bottom}
pages( "RC_mhttpd_Alarm_page", "RunControl","RC_mhttpd_Custom_page",  "RC_mhttpd_Alias_page", "" );
sections("Features", "RunControl","FrontendOperation"); // last section; top of this section; next section
</script>
\endhtmlonly

<br>
*/